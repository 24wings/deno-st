[
  {
    "kind": "interface",
    "name": "ImportMeta",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 9,
      "col": 0
    },
    "jsDoc": "Deno provides extra properties on `import.meta`.  These are included here\nto ensure that these are still available when using the Deno namespace in\nconjunction with other type libs, like `dom`.",
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "url",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 11,
            "col": 2
          },
          "jsDoc": "A string representation of the fully qualified module URL.",
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "typeParams": []
        },
        {
          "name": "main",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 22,
            "col": 2
          },
          "jsDoc": "A flag that indicates if the current module is the main module that was\ncalled when starting the program under Deno.\n\n```ts\nif (import.meta.main) {\n  // this was loaded as the main module, maybe do some bootstrapping\n}\n```",
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "Performance",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 29,
      "col": 0
    },
    "jsDoc": "Deno supports user timing Level 3 (see: https://w3c.github.io/user-timing)\nwhich is not widely supported yet in other runtimes.  These types are here\nso that these features are still available when using the Deno namespace\nin conjunction with other type libs, like `dom`.",
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "mark",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 31,
            "col": 2
          },
          "jsDoc": "Stores a timestamp with the associated name (a \"mark\").",
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "markName",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "PerformanceMarkOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PerformanceMarkOptions"
                }
              }
            }
          ],
          "returnType": {
            "repr": "PerformanceMark",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "PerformanceMark"
            }
          },
          "typeParams": []
        },
        {
          "name": "measure",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 35,
            "col": 2
          },
          "jsDoc": "Stores the `DOMHighResTimeStamp` duration between two marks along with the\nassociated name (a \"measure\").",
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "measureName",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "PerformanceMeasureOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PerformanceMeasureOptions"
                }
              }
            }
          ],
          "returnType": {
            "repr": "PerformanceMeasure",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "PerformanceMeasure"
            }
          },
          "typeParams": []
        }
      ],
      "properties": [],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "PerformanceMarkOptions",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 41,
      "col": 0
    },
    "jsDoc": null,
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "detail",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 44,
            "col": 2
          },
          "jsDoc": "Metadata to be included in the mark.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "typeParams": []
        },
        {
          "name": "startTime",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 47,
            "col": 2
          },
          "jsDoc": "Timestamp to be used as the mark time.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "PerformanceMeasureOptions",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 50,
      "col": 0
    },
    "jsDoc": null,
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "detail",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 53,
            "col": 2
          },
          "jsDoc": "Metadata to be included in the measure.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "typeParams": []
        },
        {
          "name": "start",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 57,
            "col": 2
          },
          "jsDoc": "Timestamp to be used as the start time or string to be used as start\nmark.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            ]
          },
          "typeParams": []
        },
        {
          "name": "duration",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 60,
            "col": 2
          },
          "jsDoc": "Duration between the start and end times.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        },
        {
          "name": "end",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 63,
            "col": 2
          },
          "jsDoc": "Timestamp to be used as the end time or string to be used as end mark.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            ]
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "namespace",
    "name": "Deno",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 66,
      "col": 0
    },
    "jsDoc": null,
    "namespaceDef": {
      "elements": [
        {
          "kind": "variable",
          "name": "errors",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 68,
            "col": 2
          },
          "jsDoc": "A set of error constructors that are raised by Deno APIs.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [
                  {
                    "name": "NotFound",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "PermissionDenied",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "ConnectionRefused",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "ConnectionReset",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "ConnectionAborted",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "NotConnected",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "AddrInUse",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "AddrNotAvailable",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "BrokenPipe",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "AlreadyExists",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "InvalidData",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "TimedOut",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "Interrupted",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "WriteZero",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "UnexpectedEof",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "BadResource",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "Http",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "Busy",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "ErrorConstructor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ErrorConstructor"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "pid",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 90,
            "col": 2
          },
          "jsDoc": "The current process id of the runtime.",
          "variableDef": {
            "tsType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "noColor",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 95,
            "col": 2
          },
          "jsDoc": "Reflects the `NO_COLOR` environment variable.\n\nSee: https://no-color.org/",
          "variableDef": {
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "kind": "const"
          }
        },
        {
          "kind": "interface",
          "name": "TestDefinition",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 97,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "fn",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 98,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 99,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "ignore",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 100,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "only",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 103,
                  "col": 4
                },
                "jsDoc": "If at lease one test has `only` set to true, only run tests that have\n`only` set to true and fail the test suite.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sanitizeOps",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 106,
                  "col": 4
                },
                "jsDoc": "Check that the number of async completed ops after the test is the same\nas number of dispatched ops. Defaults to true.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sanitizeResources",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 110,
                  "col": 4
                },
                "jsDoc": "Ensure the test case does not \"leak\" resources - ie. the resource table\nafter the test has exactly the same contents as before the test. Defaults\nto true.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "test",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 144,
            "col": 2
          },
          "jsDoc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n`fn` can be async if required.\n```ts\nimport {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test({\n  name: \"example test\",\n  fn(): void {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.test({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn(): void {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.test({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "t",
                "optional": false,
                "tsType": {
                  "repr": "TestDefinition",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "TestDefinition"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "test",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 164,
            "col": 2
          },
          "jsDoc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n`fn` can be async if required.\n\n```ts\nimport {assert, fail, assertEquals} from \"https://deno.land/std/testing/asserts.ts\";\n\nDeno.test(\"My test description\", ():void => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", async ():Promise<void> => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "fn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        },
                        {
                          "repr": "Promise",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              }
                            ],
                            "typeName": "Promise"
                          }
                        }
                      ]
                    },
                    "params": [],
                    "typeParams": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "exit",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 173,
            "col": 2
          },
          "jsDoc": "Exit the Deno process with optional exit code. If no exit code is supplied\nthen Deno will exit with return code of 0.\n\n```ts\nDeno.exit(5);\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "code",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "never",
              "kind": "keyword",
              "keyword": "never"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "variable",
          "name": "env",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 175,
            "col": 2
          },
          "jsDoc": null,
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [
                  {
                    "name": "get",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "set",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "delete",
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toObject",
                    "params": [],
                    "returnType": {
                      "repr": "",
                      "kind": "typeLiteral",
                      "typeLiteral": {
                        "methods": [],
                        "properties": [],
                        "callSignatures": [],
                        "indexSignatures": [
                          {
                            "readonly": false,
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "index",
                                "optional": false,
                                "tsType": {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                }
                              }
                            ],
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          }
                        ]
                      }
                    },
                    "typeParams": []
                  }
                ],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "function",
          "name": "execPath",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 229,
            "col": 2
          },
          "jsDoc": "Returns the path to the current deno executable.\n\n```ts\nconsole.log(Deno.execPath());  // e.g. \"/home/alice/.local/bin/deno\"\n```\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "chdir",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 246,
            "col": 2
          },
          "jsDoc": "Change the current working directory to the specified path.\n\n```ts\nDeno.chdir(\"/home/userA\");\nDeno.chdir(\"../userB\");\nDeno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n```\n\nThrows `Deno.errors.NotFound` if directory not found.\nThrows `Deno.errors.PermissionDenied` if the user does not have access\nrights\n\nRequires --allow-read.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "directory",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "cwd",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 262,
            "col": 2
          },
          "jsDoc": "Return a string representing the current working directory.\n\nIf the current directory can be reached via multiple paths (due to symbolic\nlinks), `cwd()` may return any one of them.\n\n```ts\nconst currentWorkingDirectory = Deno.cwd();\n```\n\nThrows `Deno.errors.NotFound` if directory not available.\n\nRequires --allow-read",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "enum",
          "name": "SeekMode",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 264,
            "col": 2
          },
          "jsDoc": null,
          "enumDef": {
            "members": [
              {
                "name": "Start",
                "jsDoc": null
              },
              {
                "name": "Current",
                "jsDoc": null
              },
              {
                "name": "End",
                "jsDoc": null
              }
            ]
          }
        },
        {
          "kind": "interface",
          "name": "Reader",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 270,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "read",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 292,
                  "col": 4
                },
                "jsDoc": "Reads up to `p.byteLength` bytes into `p`. It resolves to the number of\nbytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\nencountered. Even if `read()` resolves to `n` < `p.byteLength`, it may\nuse all of `p` as scratch space during the call. If some data is\navailable but not `p.byteLength` bytes, `read()` conventionally resolves\nto what is available instead of waiting for more.\n\nWhen `read()` encounters end-of-file condition, it resolves to EOF\n(`null`).\n\nWhen `read()` encounters an error, it rejects with an error.\n\nCallers should always process the `n` > `0` bytes returned before\nconsidering the EOF (`null`). Doing so correctly handles I/O errors that\nhappen after reading some bytes and also both of the allowed EOF\nbehaviors.\n\nImplementations should not retain a reference to `p`.\n\nUse Deno.iter() to turn a Reader into an AsyncIterator.",
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "p",
                    "optional": false,
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        ]
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ReaderSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 295,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "readSync",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 316,
                  "col": 4
                },
                "jsDoc": "Reads up to `p.byteLength` bytes into `p`. It resolves to the number\nof bytes read (`0` < `n` <= `p.byteLength`) and rejects if any error\nencountered. Even if `read()` returns `n` < `p.byteLength`, it may use\nall of `p` as scratch space during the call. If some data is available\nbut not `p.byteLength` bytes, `read()` conventionally returns what is\navailable instead of waiting for more.\n\nWhen `readSync()` encounters end-of-file condition, it returns EOF\n(`null`).\n\nWhen `readSync()` encounters an error, it throws with an error.\n\nCallers should always process the `n` > `0` bytes returned before\nconsidering the EOF (`null`). Doing so correctly handles I/O errors that happen\nafter reading some bytes and also both of the allowed EOF behaviors.\n\nImplementations should not retain a reference to `p`.\n\nUse Deno.iterSync() to turn a ReaderSync into an Iterator.",
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "p",
                    "optional": false,
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Writer",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 319,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "write",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 329,
                  "col": 4
                },
                "jsDoc": "Writes `p.byteLength` bytes from `p` to the underlying data stream. It\nresolves to the number of bytes written from `p` (`0` <= `n` <=\n`p.byteLength`) or reject with the error encountered that caused the\nwrite to stop early. `write()` must reject with a non-null error if\nwould resolve to `n` < `p.byteLength`. `write()` must not modify the\nslice data, even temporarily.\n\nImplementations should not retain a reference to `p`.",
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "p",
                    "optional": false,
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "WriterSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 332,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "writeSync",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 342,
                  "col": 4
                },
                "jsDoc": "Writes `p.byteLength` bytes from `p` to the underlying data\nstream. It returns the number of bytes written from `p` (`0` <= `n`\n<= `p.byteLength`) and any error encountered that caused the write to\nstop early. `writeSync()` must throw a non-null error if it returns `n` <\n`p.byteLength`. `writeSync()` must not modify the slice data, even\ntemporarily.\n\nImplementations should not retain a reference to `p`.",
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "p",
                    "optional": false,
                    "tsType": {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Closer",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 345,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "close",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 346,
                  "col": 4
                },
                "jsDoc": null,
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Seeker",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 349,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "seek",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 361,
                  "col": 4
                },
                "jsDoc": "Seek sets the offset for the next `read()` or `write()` to offset,\ninterpreted according to `whence`: `Start` means relative to the\nstart of the file, `Current` means relative to the current offset,\nand `End` means relative to the end. Seek resolves to the new offset\nrelative to the start of the file.\n\nSeeking to an offset before the start of the file is an error. Seeking to\nany positive offset is legal, but the behavior of subsequent I/O\noperations on the underlying object is implementation-dependent.\nIt returns the number of cursor position.",
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "offset",
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "whence",
                    "optional": false,
                    "tsType": {
                      "repr": "SeekMode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SeekMode"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "SeekerSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 364,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [
              {
                "name": "seekSync",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 374,
                  "col": 4
                },
                "jsDoc": "Seek sets the offset for the next `readSync()` or `writeSync()` to\noffset, interpreted according to `whence`: `Start` means relative\nto the start of the file, `Current` means relative to the current\noffset, and `End` means relative to the end.\n\nSeeking to an offset before the start of the file is an error. Seeking to\nany positive offset is legal, but the behavior of subsequent I/O\noperations on the underlying object is implementation-dependent.",
                "optional": false,
                "params": [
                  {
                    "kind": "identifier",
                    "name": "offset",
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "whence",
                    "optional": false,
                    "tsType": {
                      "repr": "SeekMode",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SeekMode"
                      }
                    }
                  }
                ],
                "returnType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "properties": [],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "copy",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 392,
            "col": 2
          },
          "jsDoc": "Copies from `src` to `dst` until either EOF (`null`) is read from `src` or\nan error occurs. It resolves to the number of bytes copied or rejects with\nthe first error encountered while copying.\n\n```ts\nconst source = await Deno.open(\"my_file.txt\");\nconst buffer = new Deno.Buffer()\nconst bytesCopied1 = await Deno.copy(source, Deno.stdout);\nconst bytesCopied2 = await Deno.copy(source, buffer);\n```\n\n@param src The source to copy from\n@param dst The destination to copy to\n@param options Can be used to tune size of the buffer. Default size is 32kB",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "src",
                "optional": false,
                "tsType": {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Reader"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "dst",
                "optional": false,
                "tsType": {
                  "repr": "Writer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Writer"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "bufSize",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "iter",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 429,
            "col": 2
          },
          "jsDoc": "Turns a Reader, `r`, into an async iterator.\n\n```ts\nlet f = await Deno.open(\"/etc/passwd\");\nfor await (const chunk of Deno.iter(f)) {\n  console.log(chunk);\n}\nf.close();\n```\n\nSecond argument can be used to tune size of a buffer.\nDefault size of the buffer is 32kB.\n\n```ts\nlet f = await Deno.open(\"/etc/passwd\");\nconst iter = Deno.iter(f, {\n  bufSize: 1024 * 1024\n});\nfor await (const chunk of iter) {\n  console.log(chunk);\n}\nf.close();\n```\n\nIterator uses an internal buffer of fixed size for efficiency; it returns\na view on that buffer on each iteration. It is therefore caller's\nresponsibility to copy contents of the buffer if needed; otherwise the\nnext iteration will overwrite contents of previously returned chunk.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "r",
                "optional": false,
                "tsType": {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Reader"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "bufSize",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "AsyncIterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  }
                ],
                "typeName": "AsyncIterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "iterSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 465,
            "col": 2
          },
          "jsDoc": "Turns a ReaderSync, `r`, into an iterator.\n\n```ts\nlet f = Deno.openSync(\"/etc/passwd\");\nfor (const chunk of Deno.iterSync(f)) {\n  console.log(chunk);\n}\nf.close();\n```\n\nSecond argument can be used to tune size of a buffer.\nDefault size of the buffer is 32kB.\n\n```ts\nlet f = await Deno.open(\"/etc/passwd\");\nconst iter = Deno.iterSync(f, {\n  bufSize: 1024 * 1024\n});\nfor (const chunk of iter) {\n  console.log(chunk);\n}\nf.close();\n```\n\nIterator uses an internal buffer of fixed size for efficiency; it returns\na view on that buffer on each iteration. It is therefore caller's\nresponsibility to copy contents of the buffer if needed; otherwise the\nnext iteration will overwrite contents of previously returned chunk.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "r",
                "optional": false,
                "tsType": {
                  "repr": "ReaderSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ReaderSync"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "bufSize",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "openSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 485,
            "col": 2
          },
          "jsDoc": "Synchronously open a file and return an instance of `Deno.File`.  The\nfile does not need to previously exist if using the `create` or `createNew`\nopen options.  It is the callers responsibility to close the file when finished\nwith it.\n\n```ts\nconst file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\nDeno.close(file.rid);\n```\n\nRequires `allow-read` and/or `allow-write` permissions depending on options.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "OpenOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OpenOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "File",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "File"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "open",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 500,
            "col": 2
          },
          "jsDoc": "Open a file and resolve to an instance of `Deno.File`.  The\nfile does not need to previously exist if using the `create` or `createNew`\nopen options.  It is the callers responsibility to close the file when finished\nwith it.\n\n```ts\nconst file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\nDeno.close(file.rid);\n```\n\nRequires `allow-read` and/or `allow-write` permissions depending on options.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "OpenOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OpenOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "File",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "File"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "createSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 514,
            "col": 2
          },
          "jsDoc": "Creates a file if none exists or truncates an existing file and returns\n an instance of `Deno.File`.\n\n```ts\nconst file = Deno.createSync(\"/foo/bar.txt\");\n```\n\nRequires `allow-read` and `allow-write` permissions.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "File",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "File"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "create",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 525,
            "col": 2
          },
          "jsDoc": "Creates a file if none exists or truncates an existing file and resolves to\n an instance of `Deno.File`.\n\n```ts\nconst file = await Deno.create(\"/foo/bar.txt\");\n```\n\nRequires `allow-read` and `allow-write` permissions.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "File",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "File"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 549,
            "col": 2
          },
          "jsDoc": "Synchronously read from a resource ID (`rid`) into an array buffer (`buffer`).\n\nReturns either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This does\nnot indicate EOF.\n\nThis function is one of the lowest level APIs and most users should not\nwork with this directly, but rather use Deno.readAllSync() instead.\n\n**It is not guaranteed that the full buffer will be read in a single call.**\n\n```ts\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = Deno.openSync(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = Deno.readSync(file.rid, buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nDeno.close(file.rid);\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "buffer",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "read",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 573,
            "col": 2
          },
          "jsDoc": "Read from a resource ID (`rid`) into an array buffer (`buffer`).\n\nResolves to either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This does\nnot indicate EOF.\n\nThis function is one of the lowest level APIs and most users should not\nwork with this directly, but rather use Deno.readAll() instead.\n\n**It is not guaranteed that the full buffer will be read in a single call.**\n\n```ts\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nconst file = await Deno.open(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = await Deno.read(file.rid, buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\nDeno.close(file.rid);\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "buffer",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 593,
            "col": 2
          },
          "jsDoc": "Synchronously write to the resource ID (`rid`) the contents of the array\nbuffer (`data`).\n\nReturns the number of bytes written.  This function is one of the lowest\nlevel APIs and most users should not work with this directly, but rather use\nDeno.writeAllSync() instead.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = Deno.openSync(\"/foo/bar.txt\", {write: true});\nconst bytesWritten = Deno.writeSync(file.rid, data); // 11\nDeno.close(file.rid);\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "write",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 612,
            "col": 2
          },
          "jsDoc": "Write to the resource ID (`rid`) the contents of the array buffer (`data`).\n\nResolves to the number of bytes written.  This function is one of the lowest\nlevel APIs and most users should not work with this directly, but rather use\nDeno.writeAll() instead.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst file = await Deno.open(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = await Deno.write(file.rid, data); // 11\nDeno.close(file.rid);\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "seekSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 641,
            "col": 2
          },
          "jsDoc": "Synchronously seek a resource ID (`rid`) to the given `offset` under mode\ngiven by `whence`.  The new position within the resource (bytes from the\nstart) is returned.\n\n```ts\nconst file = Deno.openSync('hello.txt', {read: true, write: true, truncate: true, create: true});\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello world\"));\n// advance cursor 6 bytes\nconst cursorPosition = Deno.seekSync(file.rid, 6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nfile.readSync(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\n```\n\nThe seek modes work as follows:\n\n```ts\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n// Seek 6 bytes from the start of the file\nconsole.log(Deno.seekSync(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(Deno.seekSync(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(Deno.seekSync(file.rid, -2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "offset",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "whence",
                "optional": false,
                "tsType": {
                  "repr": "SeekMode",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SeekMode"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "seek",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 673,
            "col": 2
          },
          "jsDoc": "Seek a resource ID (`rid`) to the given `offset` under mode given by `whence`.\nThe call resolves to the new position within the resource (bytes from the start).\n\n```ts\nconst file = await Deno.open('hello.txt', {read: true, write: true, truncate: true, create: true});\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello world\"));\n// advance cursor 6 bytes\nconst cursorPosition = await Deno.seek(file.rid, 6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nawait file.read(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\n```\n\nThe seek modes work as follows:\n\n```ts\n// Given file.rid pointing to file with \"Hello world\", which is 11 bytes long:\n// Seek 6 bytes from the start of the file\nconsole.log(await Deno.seek(file.rid, 6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(await Deno.seek(file.rid, 2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(await Deno.seek(file.rid, -2, Deno.SeekMode.End)); // \"9\" (e.g. 11-2)\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "offset",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "whence",
                "optional": false,
                "tsType": {
                  "repr": "SeekMode",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SeekMode"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "fsyncSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 689,
            "col": 2
          },
          "jsDoc": "Synchronously flushes any pending data and metadata operations of the given file stream to disk.\n ```ts\nconst file = Deno.openSync(\"my_file.txt\", { read: true, write: true, create: true });\nDeno.writeSync(file.rid, new TextEncoder().encode(\"Hello World\"));\nDeno.ftruncateSync(file.rid, 1);\nDeno.fsyncSync(file.rid);\nconsole.log(new TextDecoder().decode(Deno.readFileSync(\"my_file.txt\"))); // H\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "fsync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 701,
            "col": 2
          },
          "jsDoc": "Flushes any pending data and metadata operations of the given file stream to disk.\n ```ts\nconst file = await Deno.open(\"my_file.txt\", { read: true, write: true, create: true });\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.ftruncate(file.rid, 1);\nawait Deno.fsync(file.rid);\nconsole.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // H\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "fdatasyncSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 712,
            "col": 2
          },
          "jsDoc": null,
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "fdatasync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 723,
            "col": 2
          },
          "jsDoc": "Flushes any pending data operations of the given file stream to disk.\n ```ts\nconst file = await Deno.open(\"my_file.txt\", { read: true, write: true, create: true });\nawait Deno.write(file.rid, new TextEncoder().encode(\"Hello World\"));\nawait Deno.fdatasync(file.rid);\nconsole.log(new TextDecoder().decode(await Deno.readFile(\"my_file.txt\"))); // Hello World\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "close",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 735,
            "col": 2
          },
          "jsDoc": "Close the given resource ID (rid) which has been previously opened, such\nas via opening or creating a file.  Closing a file when you are finished\nwith it is important to avoid leaking resources.\n\n```ts\nconst file = await Deno.open(\"my_file.txt\");\n// do work with \"file\" object\nDeno.close(file.rid);\n````",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "class",
          "name": "File",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 738,
            "col": 2
          },
          "jsDoc": "The Deno abstraction for reading and writing files.",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": null,
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "rid",
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  }
                ],
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 748,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": null,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "rid",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 747,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": null,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "write",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 749,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "writeSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 750,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "read",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 751,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "readSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 752,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "seek",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "offset",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "whence",
                      "optional": false,
                      "tsType": {
                        "repr": "SeekMode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "SeekMode"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 753,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "seekSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "offset",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "whence",
                      "optional": false,
                      "tsType": {
                        "repr": "SeekMode",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "SeekMode"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 754,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "close",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 755,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [
              {
                "repr": "Reader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Reader"
                }
              },
              {
                "repr": "ReaderSync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReaderSync"
                }
              },
              {
                "repr": "Writer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Writer"
                }
              },
              {
                "repr": "WriterSync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WriterSync"
                }
              },
              {
                "repr": "Seeker",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Seeker"
                }
              },
              {
                "repr": "SeekerSync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SeekerSync"
                }
              },
              {
                "repr": "Closer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Closer"
                }
              }
            ],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "variable",
          "name": "stdin",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 759,
            "col": 2
          },
          "jsDoc": "A handle for `stdin`.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "intersection",
              "intersection": [
                {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Reader"
                  }
                },
                {
                  "repr": "ReaderSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ReaderSync"
                  }
                },
                {
                  "repr": "Closer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Closer"
                  }
                },
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "rid",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              ]
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "stdout",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 761,
            "col": 2
          },
          "jsDoc": "A handle for `stdout`.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "intersection",
              "intersection": [
                {
                  "repr": "Writer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Writer"
                  }
                },
                {
                  "repr": "WriterSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriterSync"
                  }
                },
                {
                  "repr": "Closer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Closer"
                  }
                },
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "rid",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              ]
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "stderr",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 763,
            "col": 2
          },
          "jsDoc": "A handle for `stderr`.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "intersection",
              "intersection": [
                {
                  "repr": "Writer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Writer"
                  }
                },
                {
                  "repr": "WriterSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriterSync"
                  }
                },
                {
                  "repr": "Closer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Closer"
                  }
                },
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "rid",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              ]
            },
            "kind": "const"
          }
        },
        {
          "kind": "interface",
          "name": "OpenOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 765,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "read",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 768,
                  "col": 4
                },
                "jsDoc": "Sets the option for read access. This option, when `true`, means that the\nfile should be read-able if opened.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "write",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 773,
                  "col": 4
                },
                "jsDoc": "Sets the option for write access. This option, when `true`, means that\nthe file should be write-able if opened. If the file already exists,\nany write calls on it will overwrite its contents, by default without\ntruncating it.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "append",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 778,
                  "col": 4
                },
                "jsDoc": "Sets the option for the append mode. This option, when `true`, means that\nwrites will append to a file instead of overwriting previous contents.\nNote that setting `{ write: true, append: true }` has the same effect as\nsetting only `{ append: true }`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "truncate",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 783,
                  "col": 4
                },
                "jsDoc": "Sets the option for truncating a previous file. If a file is\nsuccessfully opened with this option set it will truncate the file to `0`\nsize if it already exists. The file must be opened with write access\nfor truncate to work.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "create",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 787,
                  "col": 4
                },
                "jsDoc": "Sets the option to allow creating a new file, if one doesn't already\nexist at the specified path. Requires write or append access to be\nused.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "createNew",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 792,
                  "col": 4
                },
                "jsDoc": "Defaults to `false`. If set to `true`, no file, directory, or symlink is\nallowed to exist at the target location. Requires write or append\naccess to be used. When createNew is set to `true`, create and truncate\nare ignored.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "mode",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 796,
                  "col": 4
                },
                "jsDoc": "Permissions to use if creating the file (defaults to `0o666`, before\nthe process's umask).\nIgnored on Windows.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "isatty",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 813,
            "col": 2
          },
          "jsDoc": "Check if a given resource id (`rid`) is a TTY.\n\n```ts\n// This example is system and context specific\nconst nonTTYRid = Deno.openSync(\"my_file.txt\").rid;\nconst ttyRid = Deno.openSync(\"/dev/tty6\").rid;\nconsole.log(Deno.isatty(nonTTYRid)); // false\nconsole.log(Deno.isatty(ttyRid)); // true\nDeno.close(nonTTYRid);\nDeno.close(ttyRid);\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Buffer",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 829,
            "col": 2
          },
          "jsDoc": "A variable-sized buffer of bytes with `read()` and `write()` methods.\n\nDeno.Buffer is almost always used with some I/O like files and sockets. It\nallows one to buffer up a download from a socket. Buffer grows and shrinks\nas necessary.\n\nDeno.Buffer is NOT the same thing as Node's Buffer. Node's Buffer was\ncreated in 2009 before JavaScript had the concept of ArrayBuffers. It's\nsimply a non-standard ArrayBuffer.\n\nArrayBuffer is a fixed memory allocation. Deno.Buffer is implemented on top\nof ArrayBuffer.\n\nBased on [Go Buffer](https://golang.org/pkg/bytes/#Buffer).",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": null,
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "ab",
                    "optional": true,
                    "tsType": {
                      "repr": "ArrayBuffer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBuffer"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 830,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": "A read only number of bytes of the unread portion of the buffer.",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "length",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 844,
                  "col": 4
                }
              },
              {
                "jsDoc": "The read only capacity of the buffer's underlying byte slice, that is,\nthe total space allocated for the buffer's data.",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "capacity",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 847,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": "Returns a slice holding the unread portion of the buffer.\n\nThe slice is valid for use only until the next buffer modification (that\nis, only until the next call to a method like `read()`, `write()`,\n`reset()`, or `truncate()`). If `options.copy` is false the slice aliases the buffer content at\nleast until the next buffer modification, so immediate changes to the\nslice will affect the result of future reads.\n@param options Defaults to `{ copy: true }`",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "bytes",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": true,
                      "tsType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "methods": [],
                          "properties": [
                            {
                              "name": "copy",
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "boolean",
                                "kind": "keyword",
                                "keyword": "boolean"
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 840,
                  "col": 4
                }
              },
              {
                "jsDoc": "Returns whether the unread portion of the buffer is empty.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "empty",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 842,
                  "col": 4
                }
              },
              {
                "jsDoc": "Discards all but the first `n` unread bytes from the buffer but\ncontinues to use the same allocated storage. It throws if `n` is\nnegative or greater than the length of the buffer.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "truncate",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "n",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 851,
                  "col": 4
                }
              },
              {
                "jsDoc": "Resets the buffer to be empty, but it retains the underlying storage for\nuse by future writes. `.reset()` is the same as `.truncate(0)`.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "reset",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 854,
                  "col": 4
                }
              },
              {
                "jsDoc": "Reads the next `p.length` bytes from the buffer or until the buffer is\ndrained. Returns the number of bytes read. If the buffer has no data to\nreturn, the return is EOF (`null`).",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "readSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 858,
                  "col": 4
                }
              },
              {
                "jsDoc": "Reads the next `p.length` bytes from the buffer or until the buffer is\ndrained. Resolves to the number of bytes read. If the buffer has no\ndata to return, resolves to EOF (`null`).\n\nNOTE: This methods reads bytes synchronously; it's provided for\ncompatibility with `Reader` interfaces.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "read",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 866,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "writeSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 867,
                  "col": 4
                }
              },
              {
                "jsDoc": "NOTE: This methods writes bytes synchronously; it's provided for\ncompatibility with `Writer` interface.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "write",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 870,
                  "col": 4
                }
              },
              {
                "jsDoc": "Grows the buffer's capacity, if necessary, to guarantee space for\nanother `n` bytes. After `.grow(n)`, at least `n` bytes can be written to\nthe buffer without another allocation. If `n` is negative, `.grow()` will\nthrow. If the buffer can't grow it will throw an error.\n\nBased on Go Lang's\n[Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow).",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "grow",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "n",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 878,
                  "col": 4
                }
              },
              {
                "jsDoc": "Reads data from `r` until EOF (`null`) and appends it to the buffer,\ngrowing the buffer as needed. It resolves to the number of bytes read.\nIf the buffer becomes too large, `.readFrom()` will reject with an error.\n\nBased on Go Lang's\n[Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom).",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "readFrom",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "r",
                      "optional": false,
                      "tsType": {
                        "repr": "Reader",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Reader"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 885,
                  "col": 4
                }
              },
              {
                "jsDoc": "Reads data from `r` until EOF (`null`) and appends it to the buffer,\ngrowing the buffer as needed. It returns the number of bytes read. If the\nbuffer becomes too large, `.readFromSync()` will throw an error.\n\nBased on Go Lang's\n[Buffer.ReadFrom](https://golang.org/pkg/bytes/#Buffer.ReadFrom).",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "readFromSync",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "r",
                      "optional": false,
                      "tsType": {
                        "repr": "ReaderSync",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ReaderSync"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 892,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [
              {
                "repr": "Reader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Reader"
                }
              },
              {
                "repr": "ReaderSync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReaderSync"
                }
              },
              {
                "repr": "Writer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Writer"
                }
              },
              {
                "repr": "WriterSync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WriterSync"
                }
              }
            ],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readAll",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 914,
            "col": 2
          },
          "jsDoc": "Read Reader `r` until EOF (`null`) and resolve to the content as\nUint8Array`.\n\n```ts\n// Example from stdin\nconst stdinContent = await Deno.readAll(Deno.stdin);\n\n// Example from file\nconst file = await Deno.open(\"my_file.txt\", {read: true});\nconst myFileContent = await Deno.readAll(file);\nDeno.close(file.rid);\n\n// Example from buffer\nconst myData = new Uint8Array(100);\n// ... fill myData array with data\nconst reader = new Deno.Buffer(myData.buffer as ArrayBuffer);\nconst bufferContent = await Deno.readAll(reader);\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "r",
                "optional": false,
                "tsType": {
                  "repr": "Reader",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Reader"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readAllSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 935,
            "col": 2
          },
          "jsDoc": "Synchronously reads Reader `r` until EOF (`null`) and returns the content\nas `Uint8Array`.\n\n```ts\n// Example from stdin\nconst stdinContent = Deno.readAllSync(Deno.stdin);\n\n// Example from file\nconst file = Deno.openSync(\"my_file.txt\", {read: true});\nconst myFileContent = Deno.readAllSync(file);\nDeno.close(file.rid);\n\n// Example from buffer\nconst myData = new Uint8Array(100);\n// ... fill myData array with data\nconst reader = new Deno.Buffer(myData.buffer as ArrayBuffer);\nconst bufferContent = Deno.readAllSync(reader);\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "r",
                "optional": false,
                "tsType": {
                  "repr": "ReaderSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ReaderSync"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Uint8Array",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Uint8Array"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeAll",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 957,
            "col": 2
          },
          "jsDoc": "Write all the content of the array buffer (`arr`) to the writer (`w`).\n\n```ts\n// Example writing to stdout\nconst contentBytes = new TextEncoder().encode(\"Hello World\");\nawait Deno.writeAll(Deno.stdout, contentBytes);\n\n// Example writing to file\nconst contentBytes = new TextEncoder().encode(\"Hello World\");\nconst file = await Deno.open('test.file', {write: true});\nawait Deno.writeAll(file, contentBytes);\nDeno.close(file.rid);\n\n// Example writing to buffer\nconst contentBytes = new TextEncoder().encode(\"Hello World\");\nconst writer = new Deno.Buffer();\nawait Deno.writeAll(writer, contentBytes);\nconsole.log(writer.bytes().length);  // 11\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "w",
                "optional": false,
                "tsType": {
                  "repr": "Writer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Writer"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "arr",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeAllSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 980,
            "col": 2
          },
          "jsDoc": "Synchronously write all the content of the array buffer (`arr`) to the\nwriter (`w`).\n\n```ts\n// Example writing to stdout\nconst contentBytes = new TextEncoder().encode(\"Hello World\");\nDeno.writeAllSync(Deno.stdout, contentBytes);\n\n// Example writing to file\nconst contentBytes = new TextEncoder().encode(\"Hello World\");\nconst file = Deno.openSync('test.file', {write: true});\nDeno.writeAllSync(file, contentBytes);\nDeno.close(file.rid);\n\n// Example writing to buffer\nconst contentBytes = new TextEncoder().encode(\"Hello World\");\nconst writer = new Deno.Buffer();\nDeno.writeAllSync(writer, contentBytes);\nconsole.log(writer.bytes().length);  // 11\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "w",
                "optional": false,
                "tsType": {
                  "repr": "WriterSync",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriterSync"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "arr",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "MkdirOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 982,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "recursive",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 989,
                  "col": 4
                },
                "jsDoc": "Defaults to `false`. If set to `true`, means that any intermediate\ndirectories will also be created (as with the shell command `mkdir -p`).\nIntermediate directories are created with the same permissions.\nWhen recursive is set to `true`, succeeds silently (without changing any\npermissions) if a directory already exists at the path, or if the path\nis a symlink to an existing directory.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "mode",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 993,
                  "col": 4
                },
                "jsDoc": "Permissions to use when creating the directory (defaults to `0o777`,\nbefore the process's umask).\nIgnored on Windows.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "mkdirSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1007,
            "col": 2
          },
          "jsDoc": "Synchronously creates a new directory with the specified path.\n\n```ts\nDeno.mkdirSync(\"new_dir\");\nDeno.mkdirSync(\"nested/directories\", { recursive: true });\nDeno.mkdirSync(\"restricted_access_dir\", { mode: 0o700 });\n```\n\nDefaults to throwing error if the directory already exists.\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MkdirOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MkdirOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "mkdir",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1020,
            "col": 2
          },
          "jsDoc": "Creates a new directory with the specified path.\n\n```ts\nawait Deno.mkdir(\"new_dir\");\nawait Deno.mkdir(\"nested/directories\", { recursive: true });\nawait Deno.mkdir(\"restricted_access_dir\", { mode: 0o700 });\n```\n\nDefaults to throwing error if the directory already exists.\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MkdirOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MkdirOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "MakeTempOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1025,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "dir",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1032,
                  "col": 4
                },
                "jsDoc": "Directory where the temporary directory should be created (defaults to\nthe env variable TMPDIR, or the system's default, usually /tmp).\n\nNote that if the passed `dir` is relative, the path returned by\nmakeTempFile() and makeTempDir() will also be relative. Be mindful of\nthis when changing working directory.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "prefix",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1035,
                  "col": 4
                },
                "jsDoc": "String that should precede the random portion of the temporary\ndirectory's name.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "suffix",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1038,
                  "col": 4
                },
                "jsDoc": "String that should follow the random portion of the temporary\ndirectory's name.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "makeTempDirSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1059,
            "col": 2
          },
          "jsDoc": "Synchronously creates a new temporary directory in the default directory\nfor temporary files, unless `dir` is specified. Other optional options\ninclude prefixing and suffixing the directory name with `prefix` and\n`suffix` respectively.\n\nThe full path to the newly created directory is returned.\n\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n```ts\nconst tempDirName0 = Deno.makeTempDirSync();  // e.g. /tmp/2894ea76\nconst tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp339c944d\n```\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "makeTempDir",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1079,
            "col": 2
          },
          "jsDoc": "Creates a new temporary directory in the default directory for temporary\nfiles, unless `dir` is specified. Other optional options include\nprefixing and suffixing the directory name with `prefix` and `suffix`\nrespectively.\n\nThis call resolves to the full path to the newly created directory.\n\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n```ts\nconst tempDirName0 = await Deno.makeTempDir();  // e.g. /tmp/2894ea76\nconst tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' }); // e.g. /tmp/my_temp339c944d\n```\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "makeTempFileSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1098,
            "col": 2
          },
          "jsDoc": "Synchronously creates a new temporary file in the default directory for\ntemporary files, unless `dir` is specified.\nOther optional options include prefixing and suffixing the directory name\nwith `prefix` and `suffix` respectively.\n\nThe full path to the newly created file is returned.\n\nMultiple programs calling this function simultaneously will create different\nfiles. It is the caller's responsibility to remove the file when no longer\nneeded.\n\n```ts\nconst tempFileName0 = Deno.makeTempFileSync(); // e.g. /tmp/419e0bf2\nconst tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n```\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "makeTempFile",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1117,
            "col": 2
          },
          "jsDoc": "Creates a new temporary file in the default directory for temporary\nfiles, unless `dir` is specified.  Other\noptional options include prefixing and suffixing the directory name with\n`prefix` and `suffix` respectively.\n\nThis call resolves to the full path to the newly created file.\n\nMultiple programs calling this function simultaneously will create different\nfiles. It is the caller's responsibility to remove the file when no longer\nneeded.\n\n```ts\nconst tmpFileName0 = await Deno.makeTempFile();  // e.g. /tmp/419e0bf2\nconst tmpFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n```\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "MakeTempOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MakeTempOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "chmodSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1131,
            "col": 2
          },
          "jsDoc": "Synchronously changes the permission of a specific file/directory of\nspecified path.  Ignores the process's umask.\n\n```ts\nDeno.chmodSync(\"/path/to/file\", 0o666);\n```\n\nFor a full description, see [chmod](#Deno.chmod)\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "mode",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "chmod",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1161,
            "col": 2
          },
          "jsDoc": "Changes the permission of a specific file/directory of specified path.\nIgnores the process's umask.\n\n```ts\nawait Deno.chmod(\"/path/to/file\", 0o666);\n```\n\nThe mode is a sequence of 3 octal numbers.  The first/left-most number\nspecifies the permissions for the owner.  The second number specifies the\npermissions for the group. The last/right-most number specifies the\npermissions for others.  For example, with a mode of 0o764, the owner (7) can\nread/write/execute, the group (6) can read/write and everyone else (4) can\nread only.\n\n| Number | Description |\n| ------ | ----------- |\n| 7      | read, write, and execute |\n| 6      | read and write |\n| 5      | read and execute |\n| 4      | read only |\n| 3      | write and execute |\n| 2      | write only |\n| 1      | execute only |\n| 0      | no permission |\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "mode",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "chownSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1178,
            "col": 2
          },
          "jsDoc": "Synchronously change owner of a regular file or directory. This functionality\nis not available on Windows.\n\n```ts\nDeno.chownSync(\"myFile.txt\", 1000, 1002);\n```\n\nRequires `allow-write` permission.\n\nThrows Error (not implemented) if executed on Windows\n\n@param path path to the file\n@param uid user id (UID) of the new owner, or `null` for no change\n@param gid group id (GID) of the new owner, or `null` for no change",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "uid",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "gid",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "chown",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1199,
            "col": 2
          },
          "jsDoc": "Change owner of a regular file or directory. This functionality\nis not available on Windows.\n\n```ts\nawait Deno.chown(\"myFile.txt\", 1000, 1002);\n```\n\nRequires `allow-write` permission.\n\nThrows Error (not implemented) if executed on Windows\n\n@param path path to the file\n@param uid user id (UID) of the new owner, or `null` for no change\n@param gid group id (GID) of the new owner, or `null` for no change",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "uid",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "gid",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "RemoveOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1205,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "recursive",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1208,
                  "col": 4
                },
                "jsDoc": "Defaults to `false`. If set to `true`, path will be removed even if\nit's a non-empty directory.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "removeSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1222,
            "col": 2
          },
          "jsDoc": "Synchronously removes the named file or directory.\n\n```ts\nDeno.removeSync(\"/path/to/empty_dir/or/file\");\nDeno.removeSync(\"/path/to/populated_dir/or/file\", { recursive: true });\n```\n\nThrows error if permission denied, path not found, or path is a non-empty\ndirectory and the `recursive` option isn't set to `true`.\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "RemoveOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RemoveOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "remove",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1235,
            "col": 2
          },
          "jsDoc": "Removes the named file or directory.\n\n```ts\nawait Deno.remove(\"/path/to/empty_dir/or/file\");\nawait Deno.remove(\"/path/to/populated_dir/or/file\", { recursive: true });\n```\n\nThrows error if permission denied, path not found, or path is a non-empty\ndirectory and the `recursive` option isn't set to `true`.\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "RemoveOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RemoveOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "renameSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1255,
            "col": 2
          },
          "jsDoc": "Synchronously renames (moves) `oldpath` to `newpath`. Paths may be files or\ndirectories.  If `newpath` already exists and is not a directory,\n`renameSync()` replaces it. OS-specific restrictions may apply when\n`oldpath` and `newpath` are in different directories.\n\n```ts\nDeno.renameSync(\"old/path\", \"new/path\");\n```\n\nOn Unix, this operation does not follow symlinks at either path.\n\nIt varies between platforms when the operation throws errors, and if so what\nthey are. It's always an error to rename anything to a non-empty directory.\n\nRequires `allow-read` and `allow-write` permissions.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "oldpath",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "newpath",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "rename",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1272,
            "col": 2
          },
          "jsDoc": "Renames (moves) `oldpath` to `newpath`.  Paths may be files or directories.\nIf `newpath` already exists and is not a directory, `rename()` replaces it.\nOS-specific restrictions may apply when `oldpath` and `newpath` are in\ndifferent directories.\n\n```ts\nawait Deno.rename(\"old/path\", \"new/path\");\n```\n\nOn Unix, this operation does not follow symlinks at either path.\n\nIt varies between platforms when the operation throws errors, and if so what\nthey are. It's always an error to rename anything to a non-empty directory.\n\nRequires `allow-read` and `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "oldpath",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "newpath",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readTextFileSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1283,
            "col": 2
          },
          "jsDoc": "Synchronously reads and returns the entire contents of a file as utf8\n encoded string. Reading a directory throws an error.\n\n```ts\nconst data = Deno.readTextFileSync(\"hello.txt\");\nconsole.log(data);\n```\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readTextFile",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1294,
            "col": 2
          },
          "jsDoc": "Asynchronously reads and returns the entire contents of a file as utf8\n encoded string. Reading a directory throws an error.\n\n```ts\nconst data = await Deno.readTextFile(\"hello.txt\");\nconsole.log(data);\n```\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readFileSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1307,
            "col": 2
          },
          "jsDoc": "Synchronously reads and returns the entire contents of a file as an array\nof bytes. `TextDecoder` can be used to transform the bytes to string if\nrequired.  Reading a directory returns an empty data array.\n\n```ts\nconst decoder = new TextDecoder(\"utf-8\");\nconst data = Deno.readFileSync(\"hello.txt\");\nconsole.log(decoder.decode(data));\n```\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Uint8Array",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Uint8Array"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readFile",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1320,
            "col": 2
          },
          "jsDoc": "Reads and resolves to the entire contents of a file as an array of bytes.\n`TextDecoder` can be used to transform the bytes to string if required.\nReading a directory returns an empty data array.\n\n```ts\nconst decoder = new TextDecoder(\"utf-8\");\nconst data = await Deno.readFile(\"hello.txt\");\nconsole.log(decoder.decode(data));\n```\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "FileInfo",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1324,
            "col": 2
          },
          "jsDoc": "A FileInfo describes a file and is returned by `stat`, `lstat`,\n`statSync`, `lstatSync`.",
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "isFile",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1327,
                  "col": 4
                },
                "jsDoc": "True if this is info for a regular file. Mutually exclusive to\n`FileInfo.isDirectory` and `FileInfo.isSymlink`.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "isDirectory",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1330,
                  "col": 4
                },
                "jsDoc": "True if this is info for a regular directory. Mutually exclusive to\n`FileInfo.isFile` and `FileInfo.isSymlink`.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "isSymlink",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1333,
                  "col": 4
                },
                "jsDoc": "True if this is info for a symlink. Mutually exclusive to\n`FileInfo.isFile` and `FileInfo.isDirectory`.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "size",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1335,
                  "col": 4
                },
                "jsDoc": "The size of the file, in bytes.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "mtime",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1339,
                  "col": 4
                },
                "jsDoc": "The last modification time of the file. This corresponds to the `mtime`\nfield from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\nmay not be available on all platforms.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "atime",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1343,
                  "col": 4
                },
                "jsDoc": "The last access time of the file. This corresponds to the `atime`\nfield from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\nbe available on all platforms.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "birthtime",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1347,
                  "col": 4
                },
                "jsDoc": "The creation time of the file. This corresponds to the `birthtime`\nfield from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may\nnot be available on all platforms.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Date",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Date"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "dev",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1351,
                  "col": 4
                },
                "jsDoc": "ID of the device containing the file.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "ino",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1355,
                  "col": 4
                },
                "jsDoc": "Inode number.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "mode",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1360,
                  "col": 4
                },
                "jsDoc": "**UNSTABLE**: Match behavior with Go on Windows for `mode`.\n\nThe underlying raw `st_mode` bits that contain the standard Unix\npermissions for this file/directory.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "nlink",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1364,
                  "col": 4
                },
                "jsDoc": "Number of hard links pointing to this file.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "uid",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1368,
                  "col": 4
                },
                "jsDoc": "User ID of the owner of this file.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "gid",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1372,
                  "col": 4
                },
                "jsDoc": "Group ID of the owner of this file.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "rdev",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1376,
                  "col": 4
                },
                "jsDoc": "Device ID of this file.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "blksize",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1380,
                  "col": 4
                },
                "jsDoc": "Blocksize for filesystem I/O.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "blocks",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1384,
                  "col": 4
                },
                "jsDoc": "Number of blocks allocated to the file, in 512-byte units.\n\n_Linux/Mac OS only._",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "realPathSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1401,
            "col": 2
          },
          "jsDoc": "Returns absolute normalized path, with symbolic links resolved.\n\n```ts\n// e.g. given /home/alice/file.txt and current directory /home/alice\nDeno.symlinkSync(\"file.txt\", \"symlink_file.txt\");\nconst realPath = Deno.realPathSync(\"./file.txt\");\nconst realSymLinkPath = Deno.realPathSync(\"./symlink_file.txt\");\nconsole.log(realPath);  // outputs \"/home/alice/file.txt\"\nconsole.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n```\n\nRequires `allow-read` permission for the target path.\nAlso requires `allow-read` permission for the CWD if the target path is\nrelative.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "realPath",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1417,
            "col": 2
          },
          "jsDoc": "Resolves to the absolute normalized path, with symbolic links resolved.\n\n```ts\n// e.g. given /home/alice/file.txt and current directory /home/alice\nawait Deno.symlink(\"file.txt\", \"symlink_file.txt\");\nconst realPath = await Deno.realPath(\"./file.txt\");\nconst realSymLinkPath = await Deno.realPath(\"./symlink_file.txt\");\nconsole.log(realPath);  // outputs \"/home/alice/file.txt\"\nconsole.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n```\n\nRequires `allow-read` permission for the target path.\nAlso requires `allow-read` permission for the CWD if the target path is\nrelative.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "DirEntry",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1419,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1420,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "isFile",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1421,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "isDirectory",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1422,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "isSymlink",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1423,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readDirSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1438,
            "col": 2
          },
          "jsDoc": "Synchronously reads the directory given by `path` and returns an iterable\nof `Deno.DirEntry`.\n\n```ts\nfor (const dirEntry of Deno.readDirSync(\"/\")) {\n  console.log(dirEntry.name);\n}\n```\n\nThrows error if `path` is not a directory.\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Iterable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "DirEntry",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "DirEntry"
                    }
                  }
                ],
                "typeName": "Iterable"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readDir",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1452,
            "col": 2
          },
          "jsDoc": "Reads the directory given by `path` and returns an async iterable of\n`Deno.DirEntry`.\n\n```ts\nfor await (const dirEntry of Deno.readDir(\"/\")) {\n  console.log(dirEntry.name);\n}\n```\n\nThrows error if `path` is not a directory.\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "AsyncIterable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "DirEntry",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "DirEntry"
                    }
                  }
                ],
                "typeName": "AsyncIterable"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "copyFileSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1464,
            "col": 2
          },
          "jsDoc": "Synchronously copies the contents and permissions of one file to another\nspecified path, by default creating a new file if needed, else overwriting.\nFails if target path is a directory or is unwritable.\n\n```ts\nDeno.copyFileSync(\"from.txt\", \"to.txt\");\n```\n\nRequires `allow-read` permission on fromPath.\nRequires `allow-write` permission on toPath.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "fromPath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "toPath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "copyFile",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1479,
            "col": 2
          },
          "jsDoc": "Copies the contents and permissions of one file to another specified path,\nby default creating a new file if needed, else overwriting. Fails if target\npath is a directory or is unwritable.\n\n```ts\nawait Deno.copyFile(\"from.txt\", \"to.txt\");\n```\n\nRequires `allow-read` permission on fromPath.\nRequires `allow-write` permission on toPath.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "fromPath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "toPath",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readLinkSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1494,
            "col": 2
          },
          "jsDoc": "Returns the full path destination of the named symbolic link.\n\n```ts\nDeno.symlinkSync(\"./test.txt\", \"./test_link.txt\");\nconst target = Deno.readLinkSync(\"./test_link.txt\"); // full path of ./test.txt\n```\n\nThrows TypeError if called with a hard link\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "readLink",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1506,
            "col": 2
          },
          "jsDoc": "Resolves to the full path destination of the named symbolic link.\n\n```ts\nawait Deno.symlink(\"./test.txt\", \"./test_link.txt\");\nconst target = await Deno.readLink(\"./test_link.txt\"); // full path of ./test.txt\n```\n\nThrows TypeError if called with a hard link\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "lstat",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1519,
            "col": 2
          },
          "jsDoc": "Resolves to a `Deno.FileInfo` for the specified `path`. If `path` is a\nsymlink, information for the symlink will be returned instead of what it\npoints to.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = await Deno.lstat(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FileInfo",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FileInfo"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "lstatSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1531,
            "col": 2
          },
          "jsDoc": "Synchronously returns a `Deno.FileInfo` for the specified `path`. If\n`path` is a symlink, information for the symlink will be returned instead of\nwhat it points to..\n\n```ts\nconst fileInfo = Deno.lstatSync(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "FileInfo",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "FileInfo"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "stat",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1543,
            "col": 2
          },
          "jsDoc": "Resolves to a `Deno.FileInfo` for the specified `path`. Will always\nfollow symlinks.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = await Deno.stat(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FileInfo",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FileInfo"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "statSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1555,
            "col": 2
          },
          "jsDoc": "Synchronously returns a `Deno.FileInfo` for the specified `path`. Will\nalways follow symlinks.\n\n```ts\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\";\nconst fileInfo = Deno.statSync(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "FileInfo",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "FileInfo"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "WriteFileOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1558,
            "col": 2
          },
          "jsDoc": "Options for writing to a file.",
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "append",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1561,
                  "col": 4
                },
                "jsDoc": "Defaults to `false`. If set to `true`, will append to a file instead of\noverwriting previous contents.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "create",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1564,
                  "col": 4
                },
                "jsDoc": "Sets the option to allow creating a new file, if one doesn't already\nexist at the specified path (defaults to `true`).",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "mode",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1566,
                  "col": 4
                },
                "jsDoc": "Permissions always applied to file.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeFileSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1584,
            "col": 2
          },
          "jsDoc": "Synchronously write `data` to the given `path`, by default creating a new\nfile if needed, else overwriting.\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\\n\");\nDeno.writeFileSync(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\nDeno.writeFileSync(\"hello2.txt\", data, {create: false});  // only works if \"hello2.txt\" exists\nDeno.writeFileSync(\"hello3.txt\", data, {mode: 0o777});  // set permissions on new file\nDeno.writeFileSync(\"hello4.txt\", data, {append: true});  // add data to the end of the file\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "WriteFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriteFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeFile",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1604,
            "col": 2
          },
          "jsDoc": "Write `data` to the given `path`, by default creating a new file if needed,\nelse overwriting.\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\\n\");\nawait Deno.writeFile(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\nawait Deno.writeFile(\"hello2.txt\", data, {create: false});  // only works if \"hello2.txt\" exists\nawait Deno.writeFile(\"hello3.txt\", data, {mode: 0o777});  // set permissions on new file\nawait Deno.writeFile(\"hello4.txt\", data, {append: true});  // add data to the end of the file\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is `false`.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "WriteFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriteFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeTextFileSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1619,
            "col": 2
          },
          "jsDoc": "Synchronously write string `data` to the given `path`, by default creating a new file if needed,\nelse overwriting.\n\n```ts\nDeno.writeTextFileSync(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is `false`.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "WriteFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriteFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "writeTextFile",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1634,
            "col": 2
          },
          "jsDoc": "Asynchronously write string `data` to the given `path`, by default creating a new file if needed,\nelse overwriting.\n\n```ts\nawait Deno.writeTextFile(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is `false`.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "URL",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "URL"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "WriteFileOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "WriteFileOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "truncateSync",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1657,
            "col": 2
          },
          "jsDoc": "Synchronously truncates or extends the specified file, to reach the\nspecified `len`.  If `len` is not specified then the entire file contents\nare truncated.\n\n```ts\n// truncate the entire file\nDeno.truncateSync(\"my_file.txt\");\n\n// truncate part of the file\nconst file = Deno.makeTempFileSync();\nDeno.writeFileSync(file, new TextEncoder().encode(\"Hello World\"));\nDeno.truncateSync(file, 7);\nconst data = Deno.readFileSync(file);\nconsole.log(new TextDecoder().decode(data));\n```\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "len",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "truncate",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1675,
            "col": 2
          },
          "jsDoc": "Truncates or extends the specified file, to reach the specified `len`. If\n`len` is not specified then the entire file contents are truncated.\n\n```ts\n// truncate the entire file\nawait Deno.truncate(\"my_file.txt\");\n\n// truncate part of the file\nconst file = await Deno.makeTempFile();\nawait Deno.writeFile(file, new TextEncoder().encode(\"Hello World\"));\nawait Deno.truncate(file, 7);\nconst data = await Deno.readFile(file);\nconsole.log(new TextDecoder().decode(data));  // \"Hello W\"\n```\n\nRequires `allow-write` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "len",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "NetAddr",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1677,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "transport",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1678,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "tcp",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "tcp"
                      }
                    },
                    {
                      "repr": "udp",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "udp"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "hostname",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1679,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "port",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1680,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "UnixAddr",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1683,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "transport",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1684,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "unix",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "unix"
                      }
                    },
                    {
                      "repr": "unixpacket",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "unixpacket"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "path",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1685,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "Addr",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1688,
            "col": 2
          },
          "jsDoc": null,
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "NetAddr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "NetAddr"
                  }
                },
                {
                  "repr": "UnixAddr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "UnixAddr"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Listener",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1691,
            "col": 2
          },
          "jsDoc": "A generic network listener for stream-oriented protocols.",
          "interfaceDef": {
            "extends": [
              {
                "repr": "AsyncIterable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Conn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Conn"
                      }
                    }
                  ],
                  "typeName": "AsyncIterable"
                }
              }
            ],
            "methods": [
              {
                "name": "accept",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1693,
                  "col": 4
                },
                "jsDoc": "Waits for and resolves to the next connection to the `Listener`.",
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Conn",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Conn"
                        }
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              },
              {
                "name": "close",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1696,
                  "col": 4
                },
                "jsDoc": "Close closes the listener. Any pending accept promises will be rejected\nwith errors.",
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "typeParams": []
              },
              {
                "name": "[Symbol.asyncIterator]",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1703,
                  "col": 4
                },
                "jsDoc": null,
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "AsyncIterableIterator",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Conn",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Conn"
                        }
                      }
                    ],
                    "typeName": "AsyncIterableIterator"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [
              {
                "name": "addr",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1698,
                  "col": 4
                },
                "jsDoc": "Return the address of the `Listener`.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Addr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Addr"
                  }
                },
                "typeParams": []
              },
              {
                "name": "rid",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1701,
                  "col": 4
                },
                "jsDoc": "Return the rid of the `Listener`.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Conn",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1706,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [
              {
                "repr": "Reader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Reader"
                }
              },
              {
                "repr": "Writer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Writer"
                }
              },
              {
                "repr": "Closer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Closer"
                }
              }
            ],
            "methods": [
              {
                "name": "closeWrite",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1715,
                  "col": 4
                },
                "jsDoc": "Shuts down (`shutdown(2)`) the write side of the connection. Most\ncallers should just use `close()`.",
                "optional": false,
                "params": [],
                "returnType": {
                  "repr": "Promise",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      }
                    ],
                    "typeName": "Promise"
                  }
                },
                "typeParams": []
              }
            ],
            "properties": [
              {
                "name": "localAddr",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1708,
                  "col": 4
                },
                "jsDoc": "The local address of the connection.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Addr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Addr"
                  }
                },
                "typeParams": []
              },
              {
                "name": "remoteAddr",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1710,
                  "col": 4
                },
                "jsDoc": "The remote address of the connection.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Addr",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Addr"
                  }
                },
                "typeParams": []
              },
              {
                "name": "rid",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1712,
                  "col": 4
                },
                "jsDoc": "The resource ID of the connection.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ListenOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1718,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "port",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1720,
                  "col": 4
                },
                "jsDoc": "The port to listen on.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "hostname",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1723,
                  "col": 4
                },
                "jsDoc": "A literal IP address or host name that can be resolved to an IP address.\nIf not specified, defaults to `0.0.0.0`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "listen",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1736,
            "col": 2
          },
          "jsDoc": "Listen announces on the local transport address.\n\n```ts\nconst listener1 = Deno.listen({ port: 80 })\nconst listener2 = Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\nconst listener3 = Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\nconst listener4 = Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n```\n\nRequires `allow-net` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "intersection",
                  "intersection": [
                    {
                      "repr": "ListenOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ListenOptions"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "typeLiteral",
                      "typeLiteral": {
                        "methods": [],
                        "properties": [
                          {
                            "name": "transport",
                            "params": [],
                            "computed": false,
                            "optional": true,
                            "tsType": {
                              "repr": "tcp",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "tcp"
                              }
                            },
                            "typeParams": []
                          }
                        ],
                        "callSignatures": [],
                        "indexSignatures": []
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Listener",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Listener"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ListenTlsOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1740,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [
              {
                "repr": "ListenOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ListenOptions"
                }
              }
            ],
            "methods": [],
            "properties": [
              {
                "name": "certFile",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1742,
                  "col": 4
                },
                "jsDoc": "Server certificate file.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "keyFile",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1744,
                  "col": 4
                },
                "jsDoc": "Server public key file.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "transport",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1746,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "tcp",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "tcp"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "listenTls",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1757,
            "col": 2
          },
          "jsDoc": "Listen announces on the local transport address over TLS (transport layer\nsecurity).\n\n```ts\nconst lstnr = Deno.listenTls({ port: 443, certFile: \"./server.crt\", keyFile: \"./server.key\" });\n```\n\nRequires `allow-net` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "ListenTlsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ListenTlsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Listener",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Listener"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ConnectOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1759,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "port",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1761,
                  "col": 4
                },
                "jsDoc": "The port to connect to.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "hostname",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1764,
                  "col": 4
                },
                "jsDoc": "A literal IP address or host name that can be resolved to an IP address.\nIf not specified, defaults to `127.0.0.1`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "transport",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1765,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "tcp",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "tcp"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "connect",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1780,
            "col": 2
          },
          "jsDoc": "Connects to the hostname (default is \"127.0.0.1\") and port on the named\ntransport (default is \"tcp\"), and resolves to the connection (`Conn`).\n\n```ts\nconst conn1 = await Deno.connect({ port: 80 });\nconst conn2 = await Deno.connect({ hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n```\n\nRequires `allow-net` permission for \"tcp\".",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "ConnectOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ConnectOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Conn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Conn"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ConnectTlsOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1782,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "port",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1784,
                  "col": 4
                },
                "jsDoc": "The port to connect to.",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "hostname",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1787,
                  "col": 4
                },
                "jsDoc": "A literal IP address or host name that can be resolved to an IP address.\nIf not specified, defaults to `127.0.0.1`.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "certFile",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1789,
                  "col": 4
                },
                "jsDoc": "Server certificate file.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "connectTls",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1806,
            "col": 2
          },
          "jsDoc": "Establishes a secure connection over TLS (transport layer security) using\nan optional cert file, hostname (default is \"127.0.0.1\") and port.  The\ncert file is optional and if not included Mozilla's root certificates will\nbe used (see also https://github.com/ctz/webpki-roots for specifics)\n\n```ts\nconst conn1 = await Deno.connectTls({ port: 80 });\nconst conn2 = await Deno.connectTls({ certFile: \"./certs/my_custom_root_CA.pem\", hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connectTls({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connectTls({ certFile: \"./certs/my_custom_root_CA.pem\", hostname: \"golang.org\", port: 80});\n```\n\nRequires `allow-net` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "options",
                "optional": false,
                "tsType": {
                  "repr": "ConnectTlsOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ConnectTlsOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Conn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Conn"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "shutdown",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1818,
            "col": 2
          },
          "jsDoc": "Shutdown socket send operations.\n\nMatches behavior of POSIX shutdown(3).\n\n```ts\nconst listener = Deno.listen({ port: 80 });\nconst conn = await listener.accept();\nDeno.shutdown(conn.rid);\n```",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "rid",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "Metrics",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1820,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "opsDispatched",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1821,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsDispatchedSync",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1822,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsDispatchedAsync",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1823,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsDispatchedAsyncUnref",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1824,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsCompleted",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1825,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsCompletedSync",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1826,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsCompletedAsync",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1827,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "opsCompletedAsyncUnref",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1828,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "bytesSentControl",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1829,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "bytesSentData",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1830,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "bytesReceived",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1831,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "metrics",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1855,
            "col": 2
          },
          "jsDoc": "Receive metrics from the privileged side of Deno. This is primarily used\nin the development of Deno. 'Ops', also called 'bindings', are the go-between\nbetween Deno JavaScript and Deno Rust.\n\n     > console.table(Deno.metrics())\n     鈹屸攢鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹攢鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹怽n     鈹?        (index)         鈹?Values 鈹俓n     鈹溾攢鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹尖攢鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹n     鈹?     opsDispatched      鈹?  3    鈹俓n     鈹?   opsDispatchedSync    鈹?  2    鈹俓n     鈹?  opsDispatchedAsync    鈹?  1    鈹俓n     鈹?opsDispatchedAsyncUnref 鈹?  0    鈹俓n     鈹?     opsCompleted       鈹?  3    鈹俓n     鈹?   opsCompletedSync     鈹?  2    鈹俓n     鈹?   opsCompletedAsync    鈹?  1    鈹俓n     鈹?opsCompletedAsyncUnref  鈹?  0    鈹俓n     鈹?   bytesSentControl     鈹?  73   鈹俓n     鈹?     bytesSentData      鈹?  0    鈹俓n     鈹?     bytesReceived      鈹? 375   鈹俓n     鈹斺攢鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹粹攢鈹€鈹€鈹€鈹€鈹€鈹€鈹€鈹?,
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Metrics",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Metrics"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "resources",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1874,
            "col": 2
          },
          "jsDoc": "Returns a map of open resource ids (rid) along with their string\nrepresentations. This is an internal API and as such resource\nrepresentation has `any` type; that means it can change any time.\n\n```ts\nconsole.log(Deno.resources());\n// { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\" }\nDeno.openSync('../test.file');\nconsole.log(Deno.resources());\n// { 0: \"stdin\", 1: \"stdout\", 2: \"stderr\", 3: \"fsFile\" }\n```",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "ResourceMap",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ResourceMap"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "FsEvent",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1876,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "kind",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1877,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "any",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "any"
                      }
                    },
                    {
                      "repr": "access",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "access"
                      }
                    },
                    {
                      "repr": "create",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "create"
                      }
                    },
                    {
                      "repr": "modify",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "modify"
                      }
                    },
                    {
                      "repr": "remove",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "remove"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "paths",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1878,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "watchFs",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1899,
            "col": 2
          },
          "jsDoc": "Watch for file system events against one or more `paths`, which can be files\nor directories.  These paths must exist already.  One user action (e.g.\n`touch test.file`) can  generate multiple file system events.  Likewise,\none user action can result in multiple file paths in one event (e.g. `mv\nold_name.txt new_name.txt`).  Recursive option is `true` by default and,\nfor directories, will watch the specified directory and all sub directories.\nNote that the exact ordering of the events can vary between operating systems.\n\n```ts\nconst watcher = Deno.watchFs(\"/\");\nfor await (const event of watcher) {\n   console.log(\">>>> event\", event);\n   // { kind: \"create\", paths: [ \"/foo.txt\" ] }\n}\n```\n\nRequires `allow-read` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "paths",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "recursive",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "AsyncIterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FsEvent",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FsEvent"
                    }
                  }
                ],
                "typeName": "AsyncIterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Process",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1904,
            "col": 2
          },
          "jsDoc": null,
          "classDef": {
            "isAbstract": false,
            "constructors": [],
            "properties": [
              {
                "jsDoc": null,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "rid",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1905,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "pid",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1906,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        "indexType": {
                          "repr": "stdin",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "stdin"
                          }
                        }
                      }
                    },
                    "extendsType": {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "intersection",
                      "intersection": [
                        {
                          "repr": "Writer",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Writer"
                          }
                        },
                        {
                          "repr": "Closer",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Closer"
                          }
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "parenthesized",
                          "parenthesized": {
                            "repr": "",
                            "kind": "intersection",
                            "intersection": [
                              {
                                "repr": "Writer",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Writer"
                                }
                              },
                              {
                                "repr": "Closer",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Closer"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        }
                      ]
                    }
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stdin",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1907,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        "indexType": {
                          "repr": "stdout",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "stdout"
                          }
                        }
                      }
                    },
                    "extendsType": {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "intersection",
                      "intersection": [
                        {
                          "repr": "Reader",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Reader"
                          }
                        },
                        {
                          "repr": "Closer",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Closer"
                          }
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "parenthesized",
                          "parenthesized": {
                            "repr": "",
                            "kind": "intersection",
                            "intersection": [
                              {
                                "repr": "Reader",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Reader"
                                }
                              },
                              {
                                "repr": "Closer",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Closer"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        }
                      ]
                    }
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stdout",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1909,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        "indexType": {
                          "repr": "stderr",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "stderr"
                          }
                        }
                      }
                    },
                    "extendsType": {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "intersection",
                      "intersection": [
                        {
                          "repr": "Reader",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Reader"
                          }
                        },
                        {
                          "repr": "Closer",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Closer"
                          }
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "parenthesized",
                          "parenthesized": {
                            "repr": "",
                            "kind": "intersection",
                            "intersection": [
                              {
                                "repr": "Reader",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Reader"
                                }
                              },
                              {
                                "repr": "Closer",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Closer"
                                }
                              }
                            ]
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        }
                      ]
                    }
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stderr",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1911,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": "Wait for the process to exit and return its exit status.\n\nCalling this function multiple times will return the same status.\n\nStdin handle to the process will be closed before waiting to avoid\na deadlock.\n\nIf `stdout` and/or `stderr` were set to `\"piped\"`, they must be closed\nmanually before the process can exit.\n\nTo run process to completion and collect output from both `stdout` and\n`stderr` use:\n\n```ts\nconst p = Deno.run({ cmd, stderr: 'piped', stdout: 'piped' });\nconst [status, stdout, stderr] = await Promise.all([\n  p.status(),\n  p.output(),\n  p.stderrOutput()\n]);\np.close();\n```",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "status",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "ProcessStatus",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ProcessStatus"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1936,
                  "col": 4
                }
              },
              {
                "jsDoc": "Buffer the stdout until EOF and return it as `Uint8Array`.\n\nYou must set stdout to `\"piped\"` when creating the process.\n\nThis calls `close()` on stdout after its done.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "output",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1942,
                  "col": 4
                }
              },
              {
                "jsDoc": "Buffer the stderr until EOF and return it as `Uint8Array`.\n\nYou must set stderr to `\"piped\"` when creating the process.\n\nThis calls `close()` on stderr after its done.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "stderrOutput",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1948,
                  "col": 4
                }
              },
              {
                "jsDoc": null,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "close",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1949,
                  "col": 4
                }
              },
              {
                "jsDoc": "**UNSTABLE**: The `signo` argument may change to require the Deno.Signal\nenum.\n\nSend a signal to process. This functionality currently only works on\nLinux and Mac OS.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "kill",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "signo",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1957,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [
              {
                "name": "T",
                "constraint": {
                  "repr": "RunOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RunOptions"
                  }
                },
                "default": {
                  "repr": "RunOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RunOptions"
                  }
                }
              }
            ],
            "superTypeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ProcessStatus",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1960,
            "col": 2
          },
          "jsDoc": null,
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "success",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "true",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": true
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "code",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "0",
                          "kind": "literal",
                          "literal": {
                            "kind": "number",
                            "number": 0.0
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "signal",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "success",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "false",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": false
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "code",
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "signal",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "RunOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 1972,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "cmd",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1975,
                  "col": 4
                },
                "jsDoc": "Arguments to pass. Note, the first element needs to be a path to the\nbinary",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "tuple",
                      "tuple": [
                        {
                          "repr": "URL",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "URL"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "rest",
                          "rest": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "cwd",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1976,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "env",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1977,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [],
                    "callSignatures": [],
                    "indexSignatures": [
                      {
                        "readonly": false,
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "key",
                            "optional": false,
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          }
                        ],
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  }
                },
                "typeParams": []
              },
              {
                "name": "stdout",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1980,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "null"
                      }
                    },
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "stderr",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1981,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "null"
                      }
                    },
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "stdin",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 1982,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "inherit",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "inherit"
                      }
                    },
                    {
                      "repr": "piped",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "piped"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "null"
                      }
                    },
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "run",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2017,
            "col": 2
          },
          "jsDoc": "Spawns new subprocess.  RunOptions must contain at a minimum the `opt.cmd`,\nan array of program arguments, the first of which is the binary.\n\n```ts\nconst p = Deno.run({\n  cmd: [\"echo\", \"hello\"],\n});\n```\n\nSubprocess uses same working directory as parent process unless `opt.cwd`\nis specified.\n\nEnvironmental variables for subprocess can be specified using `opt.env`\nmapping.\n\nBy default subprocess inherits stdio of parent process. To change that\n`opt.stdout`, `opt.stderr` and `opt.stdin` can be specified independently -\nthey can be set to either an rid of open file or set to \"inherit\" \"piped\"\nor \"null\":\n\n`\"inherit\"` The default if unspecified. The child inherits from the\ncorresponding parent descriptor.\n\n`\"piped\"` A new pipe should be arranged to connect the parent and child\nsub-processes.\n\n`\"null\"` This stream will be ignored. This is the equivalent of attaching\nthe stream to `/dev/null`.\n\nDetails of the spawned process are returned.\n\nRequires `allow-run` permission.",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "opt",
                "optional": false,
                "tsType": {
                  "repr": "T",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "T"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Process",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  }
                ],
                "typeName": "Process"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "T",
                "constraint": {
                  "repr": "RunOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RunOptions"
                  }
                },
                "default": {
                  "repr": "RunOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RunOptions"
                  }
                }
              }
            ]
          }
        },
        {
          "kind": "interface",
          "name": "InspectOptions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2019,
            "col": 2
          },
          "jsDoc": null,
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "colors",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 2021,
                  "col": 4
                },
                "jsDoc": "Stylize output with ANSI colors. Defaults to false.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "compact",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 2024,
                  "col": 4
                },
                "jsDoc": "Try to fit more than one entry of a collection on the same line.\nDefaults to true.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "depth",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 2026,
                  "col": 4
                },
                "jsDoc": "Traversal depth for nested objects. Defaults to 4.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "iterableLimit",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 2028,
                  "col": 4
                },
                "jsDoc": "The maximum number of iterable entries to print. Defaults to 100.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "showProxy",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 2030,
                  "col": 4
                },
                "jsDoc": "Show a Proxy's target and handler. Defaults to false.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "sorted",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 2032,
                  "col": 4
                },
                "jsDoc": "Sort Object, Set and Map entries by key. Defaults to false.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "trailingComma",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 2034,
                  "col": 4
                },
                "jsDoc": "Add a trailing comma for multiline collections. Defaults to false.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "getters",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 2036,
                  "col": 4
                },
                "jsDoc": "* Evaluate the result of calling getters. Defaults to false.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "showHidden",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 2038,
                  "col": 4
                },
                "jsDoc": "Show an object's non-enumerable properties. Defaults to false.",
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "inspect",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2073,
            "col": 2
          },
          "jsDoc": "Converts the input into a string that has the same format as printed by\n`console.log()`.\n\n```ts\nconst obj = {};\nobj.propA = 10;\nobj.propB = \"hello\";\nconst objAsString = Deno.inspect(obj); // { propA: 10, propB: \"hello\" }\nconsole.log(obj);  // prints same value as objAsString, e.g. { propA: 10, propB: \"hello\" }\n```\n\nYou can also register custom inspect functions, via the `customInspect` Deno\nsymbol on objects, to control and customize the output.\n\n```ts\nclass A {\n  x = 10;\n  y = \"hello\";\n  [Deno.customInspect](): string {\n    return \"x=\" + this.x + \", y=\" + this.y;\n  }\n}\n```\n\n     const inStringFormat = Deno.inspect(new A()); // \"x=10, y=hello\"\n     console.log(inStringFormat);  // prints \"x=10, y=hello\"\n\nFinally, you can also specify the depth to which it will format.\n\n     Deno.inspect({a: {b: {c: {d: 'hello'}}}}, {depth: 2}); // { a: { b: [Object] } }",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "InspectOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InspectOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "variable",
          "name": "build",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2076,
            "col": 2
          },
          "jsDoc": "Build related information.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [
                  {
                    "name": "target",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "arch",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "x86_64",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "x86_64"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "os",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "darwin",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "darwin"
                          }
                        },
                        {
                          "repr": "linux",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "linux"
                          }
                        },
                        {
                          "repr": "windows",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "windows"
                          }
                        }
                      ]
                    },
                    "typeParams": []
                  },
                  {
                    "name": "vendor",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "env",
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "version",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2090,
            "col": 2
          },
          "jsDoc": "Version related information.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [
                  {
                    "name": "deno",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "v8",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "typescript",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "args",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2108,
            "col": 2
          },
          "jsDoc": "Returns the script arguments to the program. If for example we run a\nprogram:\n\ndeno run --allow-read https://deno.land/std/examples/cat.ts /etc/passwd\n\nThen `Deno.args` will contain:\n\n[ \"/etc/passwd\" ]",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "customInspect",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2113,
            "col": 2
          },
          "jsDoc": "A symbol which can be used as a key for a custom method which will be\ncalled when `Deno.inspect()` is called, or when the object is logged to\nthe console.",
          "variableDef": {
            "tsType": {
              "repr": "",
              "kind": "typeOperator",
              "typeOperator": {
                "operator": "unique",
                "tsType": {
                  "repr": "symbol",
                  "kind": "keyword",
                  "keyword": "symbol"
                }
              }
            },
            "kind": "const"
          }
        },
        {
          "kind": "variable",
          "name": "mainModule",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2116,
            "col": 2
          },
          "jsDoc": "The URL of the entrypoint module entered from the command-line.",
          "variableDef": {
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "kind": "const"
          }
        }
      ]
    }
  },
  {
    "kind": "class",
    "name": "DOMException",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2126,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "message",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "name",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2127,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "name",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2128,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "message",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2129,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "code",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2130,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Error",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Event",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2140,
      "col": 0
    },
    "jsDoc": "An event which takes place in the DOM.",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "EventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2141,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": "Returns true or false depending on how event was initialized. True if\n  event goes through its target's ancestors in reverse tree order, and\n  false otherwise.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "bubbles",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2145,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "cancelBubble",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2146,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns true or false depending on how event was initialized. Its return\n  value does not always carry meaning, but true can indicate that part of the\n  operation during which event was dispatched, can be canceled by invoking\n  the preventDefault() method.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "cancelable",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2151,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns true or false depending on how event was initialized. True if\n  event invokes listeners past a ShadowRoot node that is the root of its\n  target, and false otherwise.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "composed",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2155,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the object whose event listener's callback is currently being\n  invoked.",
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "EventTarget",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventTarget"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "currentTarget",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2158,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns true if preventDefault() was invoked successfully to indicate\n  cancellation, and false otherwise.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "defaultPrevented",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2161,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the event's phase, which is one of NONE, CAPTURING_PHASE,\n  AT_TARGET, and BUBBLING_PHASE.",
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "eventPhase",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2164,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns true if event was dispatched by the user agent, and false\n  otherwise.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "isTrusted",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2167,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the object to which event is dispatched (its target).",
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "EventTarget",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventTarget"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "target",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2169,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the event's timestamp as the number of milliseconds measured\n  relative to the time origin.",
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "timeStamp",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2172,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the type of event, e.g. \"click\", \"hashchange\", or \"submit\".",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "type",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2174,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "AT_TARGET",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2192,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "BUBBLING_PHASE",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2193,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "CAPTURING_PHASE",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2194,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "NONE",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2195,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "AT_TARGET",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2196,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "BUBBLING_PHASE",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2197,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "CAPTURING_PHASE",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2198,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "NONE",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2199,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": "Returns the invocation target objects of event's path (objects on which\n  listeners will be invoked), except for any nodes in shadow trees of which\n  the shadow root's mode is \"closed\" that are not reachable from event's\n  currentTarget.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "composedPath",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "EventTarget",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventTarget"
                }
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2179,
            "col": 2
          }
        },
        {
          "jsDoc": "If invoked when the cancelable attribute value is true, and while\n  executing a listener for the event with passive set to false, signals to\n  the operation that caused event to be dispatched that it needs to be\n  canceled.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "preventDefault",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2184,
            "col": 2
          }
        },
        {
          "jsDoc": "Invoking this method prevents event from reaching any registered event\n  listeners after the current one finishes running and, when dispatched in a\n  tree, also prevents event from reaching any other objects.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stopImmediatePropagation",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2188,
            "col": 2
          }
        },
        {
          "jsDoc": "When dispatched in a tree, invoking this method prevents event from\n  reaching any objects other than the current object.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stopPropagation",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2191,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "EventTarget",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2206,
      "col": 0
    },
    "jsDoc": "EventTarget is a DOM interface implemented by objects that can receive events\n  and may have listeners for them.",
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "[Symbol.toStringTag]",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2246,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": "Appends an event listener for events whose type attribute value is type.\n  The callback argument sets the callback that will be invoked when the event\n  is dispatched.\n  \n  The options argument sets listener-specific options. For compatibility this\n  can be a boolean, in which case the method behaves exactly as if the value\n  was specified as options's capture.\n  \n  When set to true, options's capture prevents callback from being invoked\n  when the event's eventPhase attribute value is BUBBLING_PHASE. When false\n  (or not present), callback will not be invoked when event's eventPhase\n  attribute value is CAPTURING_PHASE. Either way, callback will be invoked if\n  event's eventPhase attribute value is AT_TARGET.\n  \n  When set to true, options's passive indicates that the callback will not\n  cancel the event by invoking preventDefault(). This is used to enable\n  performance optimizations described in 搂 2.8 Observing event listeners.\n  \n  When set to true, options's once indicates that the callback will only be\n  invoked once after which the event listener will be removed.\n  \n  The event listener is appended to target's event listener list and is not\n  appended if it has the same type, callback, and capture.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "EventListenerOrEventListenerObject",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOrEventListenerObject"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2230,
            "col": 2
          }
        },
        {
          "jsDoc": "Dispatches a synthetic event event to target and returns true if either\n  event's cancelable attribute value is false or its preventDefault() method\n  was not invoked, and false otherwise.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "dispatchEvent",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "event",
                "optional": false,
                "tsType": {
                  "repr": "Event",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Event"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2238,
            "col": 2
          }
        },
        {
          "jsDoc": "Removes the event listener in target's event listener list with the same\n  type, callback, and options.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "callback",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "EventListenerOrEventListenerObject",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOrEventListenerObject"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    },
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2241,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "EventListenerOrEventListenerObject",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2257,
      "col": 0
    },
    "jsDoc": null,
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "EventListener",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "EventListener"
            }
          },
          {
            "repr": "EventListenerObject",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "EventListenerObject"
            }
          }
        ]
      },
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "ProgressEvent",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2279,
      "col": 0
    },
    "jsDoc": "Events measuring progress of an underlying process, like an HTTP request\n(for an XMLHttpRequest, or the loading of the underlying resource of an\n<img>, <audio>, <video>, <style> or <link>).",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "ProgressEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ProgressEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2280,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "lengthComputable",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2281,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "loaded",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2282,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "target",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2283,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "total",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2284,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [
        {
          "name": "T",
          "constraint": {
            "repr": "EventTarget",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "EventTarget"
            }
          },
          "default": {
            "repr": "EventTarget",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "EventTarget"
            }
          }
        }
      ],
      "superTypeParams": []
    }
  },
  {
    "kind": "function",
    "name": "atob",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2291,
      "col": 0
    },
    "jsDoc": "Decodes a string of data which has been encoded using base-64 encoding.\n\n    console.log(atob(\"aGVsbG8gd29ybGQ=\")); // outputs 'hello world'",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "s",
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        }
      ],
      "returnType": {
        "repr": "string",
        "kind": "keyword",
        "keyword": "string"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "btoa",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2297,
      "col": 0
    },
    "jsDoc": "Creates a base-64 ASCII encoded string from the input string.\n\n    console.log(btoa(\"hello world\"));  // outputs \"aGVsbG8gd29ybGQ=\"",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "s",
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        }
      ],
      "returnType": {
        "repr": "string",
        "kind": "keyword",
        "keyword": "string"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "TextDecoder",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2299,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [
                    {
                      "name": "fatal",
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "ignoreBOM",
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2306,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": "Returns encoding's name, lowercased.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "encoding",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2301,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns `true` if error mode is \"fatal\", and `false` otherwise.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "fatal",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2303,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns `true` if ignore BOM flag is set, and `false` otherwise.",
          "tsType": null,
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "ignoreBOM",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2305,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "[Symbol.toStringTag]",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2312,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": "Returns the result of running encoding's decoder.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "decode",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "input",
                "optional": true,
                "tsType": {
                  "repr": "BufferSource",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BufferSource"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "methods": [],
                    "properties": [
                      {
                        "name": "stream",
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "false",
                          "kind": "literal",
                          "literal": {
                            "kind": "boolean",
                            "boolean": false
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2311,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "TextEncoder",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2315,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "jsDoc": "Returns \"utf-8\".",
          "tsType": null,
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "encoding",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2317,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "[Symbol.toStringTag]",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2324,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": "Returns the result of running UTF-8's encoder.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "encode",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "input",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Uint8Array",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Uint8Array"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2319,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "encodeInto",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "input",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "dest",
                "optional": false,
                "tsType": {
                  "repr": "Uint8Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Uint8Array"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "methods": [],
                "properties": [
                  {
                    "name": "read",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "written",
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2320,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "AbortController",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2329,
      "col": 0
    },
    "jsDoc": "A controller object that allows you to abort one or more DOM requests as and\nwhen desired.",
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "jsDoc": "Returns the AbortSignal object associated with this object.",
          "tsType": {
            "repr": "AbortSignal",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "AbortSignal"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "signal",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2331,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": "Invoking this method will set this object's AbortSignal's aborted flag and\n signal to any observers that the associated activity is to be aborted.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "abort",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2334,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "AbortSignal",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2370,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "AbortSignal",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AbortSignal"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "FileReader",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2427,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "FileReader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FileReader"
                }
              },
              "typeParams": []
            },
            {
              "name": "DONE",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "typeParams": []
            },
            {
              "name": "EMPTY",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "typeParams": []
            },
            {
              "name": "LOADING",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "class",
    "name": "URLSearchParams",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2435,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "init",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  },
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "URLSearchParams",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URLSearchParams"
                    }
                  }
                ]
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2436,
            "col": 2
          }
        }
      ],
      "properties": [],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "toString",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2439,
            "col": 2
          }
        },
        {
          "jsDoc": "Appends a specified key/value pair as a new search parameter.\n\n```ts\nlet searchParams = new URLSearchParams();\nsearchParams.append('name', 'first');\nsearchParams.append('name', 'second');\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "append",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2449,
            "col": 2
          }
        },
        {
          "jsDoc": "Deletes the given search parameter and its associated value,\nfrom the list of all search parameters.\n\n```ts\nlet searchParams = new URLSearchParams([['name', 'value']]);\nsearchParams.delete('name');\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "delete",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2459,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns all the values associated with a given search parameter\nas an array.\n\n```ts\nsearchParams.getAll('name');\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getAll",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2468,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the first value associated to the given search parameter.\n\n```ts\nsearchParams.get('name');\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "get",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2476,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns a Boolean that indicates whether a parameter with the\nspecified name exists.\n\n```ts\nsearchParams.has('name');\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "has",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2485,
            "col": 2
          }
        },
        {
          "jsDoc": "Sets the value associated with a given search parameter to the\ngiven value. If there were several matching values, this method\ndeletes the others. If the search parameter doesn't exist, this\nmethod creates it.\n\n```ts\nsearchParams.set('name', 'value');\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "set",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2496,
            "col": 2
          }
        },
        {
          "jsDoc": "Sort all key/value pairs contained in this object in place and\nreturn undefined. The sort order is according to Unicode code\npoints of the keys.\n\n```ts\nsearchParams.sort();\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "sort",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2506,
            "col": 2
          }
        },
        {
          "jsDoc": "Calls a function for each element contained in this object in\nplace and return undefined. Optionally accepts an object to use\nas this when executing callback as second argument.\n\n```ts\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nparams.forEach((value, key, parent) => {\n  console.log(value, key, parent);\n});\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "forEach",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "callbackfn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "parent",
                        "optional": false,
                        "tsType": {
                          "repr": "this",
                          "kind": "this",
                          "this": true
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "thisArg",
                "optional": true,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2520,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns an iterator allowing to go through all keys contained\nin this object.\n\n```ts\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const key of params.keys()) {\n  console.log(key);\n}\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "keys",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2535,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns an iterator allowing to go through all values contained\nin this object.\n\n```ts\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const value of params.values()) {\n  console.log(value);\n}\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "values",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2547,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns an iterator allowing to go through all key/value\npairs contained in this object.\n\n```ts\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const [key, value] of params.entries()) {\n  console.log(key, value);\n}\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entries",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ]
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2559,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns an iterator allowing to go through all key/value\npairs contained in this object.\n\n```ts\nconst params = new URLSearchParams([[\"a\", \"b\"], [\"c\", \"d\"]]);\nfor (const [key, value] of params) {\n  console.log(key, value);\n}\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "[Symbol.iterator]",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ]
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2571,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns a query string suitable for use in a URL.\n\n```ts\nsearchParams.toString();\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toString",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2579,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "URL",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2583,
      "col": 0
    },
    "jsDoc": "The URL interface represents an object providing static methods used for creating object URLs.",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "url",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "base",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "URL",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "URL"
                    }
                  }
                ]
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2584,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hash",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2588,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "host",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2589,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hostname",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2590,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "href",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2591,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "origin",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2593,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "password",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2594,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pathname",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2595,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "port",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2596,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "protocol",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2597,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "search",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2598,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "URLSearchParams",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "URLSearchParams"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "searchParams",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2599,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "username",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2600,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "createObjectURL",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "object",
                "optional": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            ],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2585,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "revokeObjectURL",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2586,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toString",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2592,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toJSON",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2601,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "ReadableStreamDefaultReader",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2643,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ReadableStreamDefaultReader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableStreamDefaultReader"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "ReadableStreamReader",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2654,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ReadableStreamReader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableStreamReader"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "ReadableStreamDefaultController",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2701,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ReadableStreamDefaultController",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableStreamDefaultController"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "ReadableByteStreamController",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2714,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ReadableByteStreamController",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableByteStreamController"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "class",
    "name": "CountQueuingStrategy",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2737,
      "col": 0
    },
    "jsDoc": "This Streams API interface provides a built-in byte length queuing strategy\nthat can be used when constructing streams.",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "options",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [
                    {
                      "name": "highWaterMark",
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2738,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "highWaterMark",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2739,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "size",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chunk",
                "optional": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            ],
            "returnType": {
              "repr": "1",
              "kind": "literal",
              "literal": {
                "kind": "number",
                "number": 1.0
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2740,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "QueuingStrategy",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "QueuingStrategy"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "ByteLengthQueuingStrategy",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2743,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "options",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "methods": [],
                  "properties": [
                    {
                      "name": "highWaterMark",
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2745,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "highWaterMark",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2746,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "size",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "chunk",
                "optional": false,
                "tsType": {
                  "repr": "ArrayBufferView",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ArrayBufferView"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2747,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "QueuingStrategy",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "ArrayBufferView",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ArrayBufferView"
                }
              }
            ],
            "typeName": "QueuingStrategy"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "ReadableStream",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2777,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "ReadableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ReadableStream"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "WritableStream",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2818,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "WritableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WritableStream"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "WritableStreamDefaultWriter",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2848,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "WritableStreamDefaultWriter",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WritableStreamDefaultWriter"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "TransformStream",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2858,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "typeLiteral",
        "typeLiteral": {
          "methods": [],
          "properties": [
            {
              "name": "prototype",
              "params": [],
              "computed": false,
              "optional": false,
              "tsType": {
                "repr": "TransformStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TransformStream"
                }
              },
              "typeParams": []
            }
          ],
          "callSignatures": [],
          "indexSignatures": []
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "class",
    "name": "Blob",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2901,
      "col": 0
    },
    "jsDoc": "A file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "blobParts",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "BlobPart",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BlobPart"
                  }
                }
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "BlobPropertyBag",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "BlobPropertyBag"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2902,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "size",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2904,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "type",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2905,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "arrayBuffer",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "ArrayBuffer",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ArrayBuffer"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2906,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "slice",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "start",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "end",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "contentType",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "Blob",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Blob"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2907,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "stream",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "ReadableStream",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ReadableStream"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2908,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "text",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2909,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "File",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2918,
      "col": 0
    },
    "jsDoc": "Provides information about files and allows JavaScript in a web page to\naccess their content.",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "fileBits",
              "optional": false,
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "BlobPart",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BlobPart"
                  }
                }
              }
            },
            {
              "kind": "identifier",
              "name": "fileName",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "FilePropertyBag",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FilePropertyBag"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2919,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "lastModified",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2925,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "name",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2926,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Blob",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "FormData",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 2935,
      "col": 0
    },
    "jsDoc": "Provides a way to easily construct a set of key/value pairs representing\nform fields and their values, which can then be easily sent using the\nXMLHttpRequest.send() method. It uses the same format a form would use if the\nencoding type were set to \"multipart/form-data\".",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2938,
            "col": 2
          }
        }
      ],
      "properties": [],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "append",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "Blob",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Blob"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "fileName",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2940,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "delete",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2941,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "get",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "FormDataEntryValue",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "FormDataEntryValue"
                  }
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2942,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getAll",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "FormDataEntryValue",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FormDataEntryValue"
                }
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2943,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "has",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2944,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "set",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "Blob",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Blob"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "fileName",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2945,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "keys",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2946,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "values",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2947,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entries",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "FormDataEntryValue",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "FormDataEntryValue"
                        }
                      }
                    ]
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2948,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "[Symbol.iterator]",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "FormDataEntryValue",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "FormDataEntryValue"
                        }
                      }
                    ]
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2949,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "forEach",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "callback",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "FormDataEntryValue",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "FormDataEntryValue"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "parent",
                        "optional": false,
                        "tsType": {
                          "repr": "this",
                          "kind": "this",
                          "this": true
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "thisArg",
                "optional": true,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 2950,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "DomIterable",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "FormDataEntryValue",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FormDataEntryValue"
                }
              }
            ],
            "typeName": "DomIterable"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Headers",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3006,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "init",
              "optional": true,
              "tsType": {
                "repr": "HeadersInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "HeadersInit"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3007,
            "col": 2
          }
        }
      ],
      "properties": [],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": "Appends a new value onto an existing header inside a `Headers` object, or\nadds the header if it does not already exist.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "append",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3012,
            "col": 2
          }
        },
        {
          "jsDoc": "Deletes a header from a `Headers` object.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "delete",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3014,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns an iterator allowing to go through all key/value pairs\ncontained in this Headers object. The both the key and value of each pairs\nare ByteString objects.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entries",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ]
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3019,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns a `ByteString` sequence of all the values of a header within a\n`Headers` object with a given name.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "get",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "null",
                  "kind": "keyword",
                  "keyword": "null"
                }
              ]
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3023,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns a boolean stating whether a `Headers` object contains a certain\nheader.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "has",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3027,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns an iterator allowing to go through all keys contained in\nthis Headers object. The keys are ByteString objects.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "keys",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3031,
            "col": 2
          }
        },
        {
          "jsDoc": "Sets a new value for an existing header inside a Headers object, or adds\nthe header if it does not already exist.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "set",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3035,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns an iterator allowing to go through all values contained in\nthis Headers object. The values are ByteString objects.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "values",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3039,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "forEach",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "callbackfn",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "parent",
                        "optional": false,
                        "tsType": {
                          "repr": "this",
                          "kind": "this",
                          "this": true
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "thisArg",
                "optional": true,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3040,
            "col": 2
          }
        },
        {
          "jsDoc": "The Symbol.iterator well-known symbol specifies the default\niterator for this Headers object",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "[Symbol.iterator]",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "IterableIterator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ]
                  }
                ],
                "typeName": "IterableIterator"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3047,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "DomIterable",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            ],
            "typeName": "DomIterable"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Request",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3163,
      "col": 0
    },
    "jsDoc": "This Fetch API interface represents a resource request.",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "input",
              "optional": false,
              "tsType": {
                "repr": "RequestInfo",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "RequestInfo"
                }
              }
            },
            {
              "kind": "identifier",
              "name": "init",
              "optional": true,
              "tsType": {
                "repr": "RequestInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "RequestInit"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3164,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": "Returns the cache mode associated with request, which is a string\nindicating how the request will interact with the browser's cache when\nfetching.",
          "tsType": {
            "repr": "RequestCache",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestCache"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "cache",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3171,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the credentials mode associated with request, which is a string\nindicating whether credentials will be sent with the request always, never,\nor only when sent to a same-origin URL.",
          "tsType": {
            "repr": "RequestCredentials",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestCredentials"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "credentials",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3177,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the kind of resource requested by request, e.g., \"document\" or \"script\".",
          "tsType": {
            "repr": "RequestDestination",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestDestination"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "destination",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3181,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns a Headers object consisting of the headers associated with request.\nNote that headers added in the network layer by the user agent will not be\naccounted for in this object, e.g., the \"Host\" header.",
          "tsType": {
            "repr": "Headers",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Headers"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "headers",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3187,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns request's subresource integrity metadata, which is a cryptographic\nhash of the resource being fetched. Its value consists of multiple hashes\nseparated by whitespace. [SRI]",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "integrity",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3193,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns a boolean indicating whether or not request is for a history\nnavigation (a.k.a. back-forward navigation).",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "isHistoryNavigation",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3198,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns a boolean indicating whether or not request is for a reload\nnavigation.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "isReloadNavigation",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3203,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns a boolean indicating whether or not request can outlive the global\nin which it was created.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "keepalive",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3208,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns request's HTTP method, which is \"GET\" by default.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "method",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3212,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the mode associated with request, which is a string indicating\nwhether the request will use CORS, or will be restricted to same-origin\nURLs.",
          "tsType": {
            "repr": "RequestMode",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestMode"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "mode",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3218,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the redirect mode associated with request, which is a string\nindicating how redirects for the request will be handled during fetching. A\nrequest will follow redirects by default.",
          "tsType": {
            "repr": "RequestRedirect",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestRedirect"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "redirect",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3224,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the referrer of request. Its value can be a same-origin URL if\nexplicitly set in init, the empty string to indicate no referrer, and\n\"about:client\" when defaulting to the global's default. This is used during\nfetching to determine the value of the `Referer` header of the request\nbeing made.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "referrer",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3232,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the referrer policy associated with request. This is used during\nfetching to compute the value of the request's referrer.",
          "tsType": {
            "repr": "ReferrerPolicy",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "ReferrerPolicy"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "referrerPolicy",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3237,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the signal associated with request, which is an AbortSignal object\nindicating whether or not request has been aborted, and its abort event\nhandler.",
          "tsType": {
            "repr": "AbortSignal",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "AbortSignal"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "signal",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3243,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the URL of request as a string.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "url",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3247,
            "col": 2
          }
        },
        {
          "jsDoc": "A simple getter used to expose a `ReadableStream` of the body contents.",
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "ReadableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": "ReadableStream"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "body",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3251,
            "col": 2
          }
        },
        {
          "jsDoc": "Stores a `Boolean` that declares whether the body has been used in a\nresponse yet.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "bodyUsed",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3255,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clone",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Request",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Request"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3248,
            "col": 2
          }
        },
        {
          "jsDoc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with an `ArrayBuffer`.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "arrayBuffer",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "ArrayBuffer",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ArrayBuffer"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3259,
            "col": 2
          }
        },
        {
          "jsDoc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with a `Blob`.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "blob",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Blob",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Blob"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3263,
            "col": 2
          }
        },
        {
          "jsDoc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with a `FormData` object.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "formData",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FormData",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FormData"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3267,
            "col": 2
          }
        },
        {
          "jsDoc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with the result of parsing the body text as JSON.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "json",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3271,
            "col": 2
          }
        },
        {
          "jsDoc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with a `USVString` (text).",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "text",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3275,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "Body",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "Body"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Response",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3293,
      "col": 0
    },
    "jsDoc": "This Fetch API interface represents the response to a request.",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "body",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "BodyInit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "BodyInit"
                    }
                  },
                  {
                    "repr": "null",
                    "kind": "keyword",
                    "keyword": "null"
                  }
                ]
              }
            },
            {
              "kind": "identifier",
              "name": "init",
              "optional": true,
              "tsType": {
                "repr": "ResponseInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ResponseInit"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3294,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "Headers",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Headers"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "headers",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3298,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "ok",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3299,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "redirected",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3300,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "status",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3301,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "statusText",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3302,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "Promise",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": [
                {
                  "repr": "Headers",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Headers"
                  }
                }
              ],
              "typeName": "Promise"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "trailer",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3303,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "ResponseType",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "ResponseType"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "type",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3304,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "url",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3305,
            "col": 2
          }
        },
        {
          "jsDoc": "A simple getter used to expose a `ReadableStream` of the body contents.",
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "ReadableStream",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": "ReadableStream"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "body",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3309,
            "col": 2
          }
        },
        {
          "jsDoc": "Stores a `Boolean` that declares whether the body has been used in a\nresponse yet.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "bodyUsed",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3313,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "error",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Response",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Response"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3295,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "redirect",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "status",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "returnType": {
              "repr": "Response",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Response"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3296,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clone",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Response",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Response"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3306,
            "col": 2
          }
        },
        {
          "jsDoc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with an `ArrayBuffer`.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "arrayBuffer",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "ArrayBuffer",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ArrayBuffer"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3317,
            "col": 2
          }
        },
        {
          "jsDoc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with a `Blob`.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "blob",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Blob",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Blob"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3321,
            "col": 2
          }
        },
        {
          "jsDoc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with a `FormData` object.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "formData",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "FormData",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FormData"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3325,
            "col": 2
          }
        },
        {
          "jsDoc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with the result of parsing the body text as JSON.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "json",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3329,
            "col": 2
          }
        },
        {
          "jsDoc": "Takes a `Response` stream and reads it to completion. It returns a promise\nthat resolves with a `USVString` (text).",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "text",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3333,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [
        {
          "repr": "Body",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "Body"
          }
        }
      ],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "function",
    "name": "fetch",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3344,
      "col": 0
    },
    "jsDoc": "Fetch a resource from the network. It returns a Promise that resolves to the\nResponse to that request, whether it is successful or not.\n\n    const response = await fetch(\"http://my.json.host/data.json\");\n    console.log(response.status);  // e.g. 200\n    console.log(response.statusText); // e.g. \"OK\"\n    const jsonData = await response.json();",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "input",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "Request",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Request"
                }
              },
              {
                "repr": "URL",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "URL"
                }
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            ]
          }
        },
        {
          "kind": "identifier",
          "name": "init",
          "optional": true,
          "tsType": {
            "repr": "RequestInit",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "RequestInit"
            }
          }
        }
      ],
      "returnType": {
        "repr": "Promise",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": [
            {
              "repr": "Response",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Response"
              }
            }
          ],
          "typeName": "Promise"
        }
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "CloseEvent",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3362,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "CloseEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CloseEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3363,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": "Returns the WebSocket connection close code provided by the server.",
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "code",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3367,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the WebSocket connection close reason provided by the server.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reason",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3371,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns true if the connection closed cleanly; false otherwise.",
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "wasClean",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3375,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "WebSocket",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3386,
      "col": 0
    },
    "jsDoc": "Provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "url",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "protocols",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ]
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3387,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "CLOSED",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3389,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "CLOSING",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3390,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "CONNECTING",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3391,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": true,
          "name": "OPEN",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3392,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns a string that indicates how binary data from the WebSocket object is exposed to scripts:\n\nCan be set, to change how binary data is returned. The default is \"blob\".",
          "tsType": {
            "repr": "BinaryType",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "BinaryType"
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "binaryType",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3399,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the number of bytes of application data (UTF-8 text and binary data) that have been queued using send() but not yet been transmitted to the network.\n\nIf the WebSocket connection is closed, this attribute's value will only increase with each call to the send() method. (The number does not reset to zero once the connection closes.)",
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "bufferedAmount",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3405,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the extensions selected by the server, if any.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "extensions",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3409,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "CloseEvent",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "CloseEvent"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onclose",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3410,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Event",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Event"
                              }
                            },
                            {
                              "repr": "ErrorEvent",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "ErrorEvent"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onerror",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3411,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "MessageEvent",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MessageEvent"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onmessage",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3412,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "Event",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Event"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onopen",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3413,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the subprotocol selected by the server, if any. It can be used in conjunction with the array form of the constructor's second argument to perform subprotocol negotiation.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "protocol",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3417,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the state of the WebSocket object's connection. It can have the values described below.",
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "readyState",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3421,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the URL that was used to establish the WebSocket connection.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "url",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3425,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "CLOSED",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3434,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "CLOSING",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3435,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "CONNECTING",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3436,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "OPEN",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3437,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": "Closes the WebSocket connection, optionally using code as the the WebSocket connection close code and reason as the the WebSocket connection close reason.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "close",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "code",
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "identifier",
                "name": "reason",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3429,
            "col": 2
          }
        },
        {
          "jsDoc": "Transmits data using the WebSocket connection. data can be a string, a Blob, an ArrayBuffer, or an ArrayBufferView.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "send",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "ArrayBufferLike",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBufferLike"
                      }
                    },
                    {
                      "repr": "Blob",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Blob"
                      }
                    },
                    {
                      "repr": "ArrayBufferView",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBufferView"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3433,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "WebSocketEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "WebSocketEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "WebSocketEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WebSocketEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3438,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3443,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "WebSocket",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "WebSocket"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "WebSocketEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "WebSocketEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "WebSocketEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WebSocketEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3448,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3453,
            "col": 2
          }
        }
      ],
      "extends": "EventTarget",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "namespace",
    "name": "WebAssembly",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3473,
      "col": 0
    },
    "jsDoc": null,
    "namespaceDef": {
      "elements": [
        {
          "kind": "class",
          "name": "CompileError",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3479,
            "col": 2
          },
          "jsDoc": "The `WebAssembly.CompileError` object indicates an error during WebAssembly decoding or validation.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError)",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": "Creates a new `WebAssembly.CompileError` object.",
                "accessibility": null,
                "name": "constructor",
                "params": [],
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3481,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Error",
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Global",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3491,
            "col": 2
          },
          "jsDoc": "A `WebAssembly.Global` object represents a global variable instance, accessible from\nboth JavaScript and importable/exportable across one or more `WebAssembly.Module`\ninstances. This allows dynamic linking of multiple modules.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global)",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": "Creates a new `Global` object.",
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "descriptor",
                    "optional": false,
                    "tsType": {
                      "repr": "GlobalDescriptor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "GlobalDescriptor"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "v",
                    "optional": true,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    }
                  }
                ],
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3493,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": "The value contained inside the global variable 鈥?this can be used to directly set\nand get the global's value.",
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                },
                "readonly": false,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "value",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3499,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": "Old-style method that returns the value contained inside the global variable.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "valueOf",
                "kind": "method",
                "functionDef": {
                  "params": [],
                  "returnType": {
                    "repr": "any",
                    "kind": "keyword",
                    "keyword": "any"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3502,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Instance",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3512,
            "col": 2
          },
          "jsDoc": "A `WebAssembly.Instance` object is a stateful, executable instance of a `WebAssembly.Module`.\nInstance objects contain all the Exported WebAssembly functions that allow calling into\nWebAssembly code from JavaScript.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance)",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": "Creates a new Instance object.",
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "module",
                    "optional": false,
                    "tsType": {
                      "repr": "Module",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Module"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "importObject",
                    "optional": true,
                    "tsType": {
                      "repr": "Imports",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Imports"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3514,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": "Returns an object containing as its members all the functions exported from the\nWebAssembly module instance, to allow them to be accessed and used by JavaScript.\nRead-only.",
                "tsType": {
                  "repr": "Exports",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Exports"
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "exports",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3521,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "LinkError",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3530,
            "col": 2
          },
          "jsDoc": "The `WebAssembly.LinkError` object indicates an error during module instantiation\n(besides traps from the start function).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError)",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": "Creates a new WebAssembly.LinkError object.",
                "accessibility": null,
                "name": "constructor",
                "params": [],
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3532,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Error",
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Memory",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3544,
            "col": 2
          },
          "jsDoc": "The `WebAssembly.Memory` object is a resizable `ArrayBuffer` or `SharedArrayBuffer` that\nholds the raw bytes of memory accessed by a WebAssembly Instance.\n\nA memory created by JavaScript or in WebAssembly code will be accessible and mutable\nfrom both JavaScript and WebAssembly.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": "Creates a new `Memory` object.",
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "descriptor",
                    "optional": false,
                    "tsType": {
                      "repr": "MemoryDescriptor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "MemoryDescriptor"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3546,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": "An accessor property that returns the buffer contained in the memory.",
                "tsType": {
                  "repr": "ArrayBuffer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ArrayBuffer"
                  }
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "buffer",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3549,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": "Increases the size of the memory instance by a specified number of WebAssembly\npages (each one is 64KB in size).",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "grow",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "delta",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3555,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Module",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3564,
            "col": 2
          },
          "jsDoc": "A `WebAssembly.Module` object contains stateless WebAssembly code that has already been compiled\nby the browser 鈥?this can be efficiently shared with Workers, and instantiated multiple times.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module)",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": "Creates a new `Module` object.",
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "bytes",
                    "optional": false,
                    "tsType": {
                      "repr": "BufferSource",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "BufferSource"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3566,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": "Given a `Module` and string, returns a copy of the contents of all custom sections in the\nmodule with the given string name.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": true,
                "name": "customSections",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "moduleObject",
                      "optional": false,
                      "tsType": {
                        "repr": "Module",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Module"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "sectionName",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "ArrayBuffer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBuffer"
                      }
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3572,
                  "col": 4
                }
              },
              {
                "jsDoc": "Given a `Module`, returns an array containing descriptions of all the declared exports.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": true,
                "name": "exports",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "moduleObject",
                      "optional": false,
                      "tsType": {
                        "repr": "Module",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Module"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "ModuleExportDescriptor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ModuleExportDescriptor"
                      }
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3578,
                  "col": 4
                }
              },
              {
                "jsDoc": "Given a `Module`, returns an array containing descriptions of all the declared imports.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": true,
                "name": "imports",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "moduleObject",
                      "optional": false,
                      "tsType": {
                        "repr": "Module",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Module"
                        }
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "ModuleImportDescriptor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ModuleImportDescriptor"
                      }
                    }
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3581,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "RuntimeError",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3590,
            "col": 2
          },
          "jsDoc": "The `WebAssembly.RuntimeError` object is the error type that is thrown whenever WebAssembly\nspecifies a trap.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError)",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": "Creates a new `WebAssembly.RuntimeError` object.",
                "accessibility": null,
                "name": "constructor",
                "params": [],
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3592,
                  "col": 4
                }
              }
            ],
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Error",
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "class",
          "name": "Table",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3603,
            "col": 2
          },
          "jsDoc": "The `WebAssembly.Table()` object is a JavaScript wrapper object 鈥?an array-like structure\nrepresenting a WebAssembly Table, which stores function references. A table created by\nJavaScript or in WebAssembly code will be accessible and mutable from both JavaScript\nand WebAssembly.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table)",
          "classDef": {
            "isAbstract": false,
            "constructors": [
              {
                "jsDoc": "Creates a new `Table` object.",
                "accessibility": null,
                "name": "constructor",
                "params": [
                  {
                    "kind": "identifier",
                    "name": "descriptor",
                    "optional": false,
                    "tsType": {
                      "repr": "TableDescriptor",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TableDescriptor"
                      }
                    }
                  }
                ],
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3605,
                  "col": 4
                }
              }
            ],
            "properties": [
              {
                "jsDoc": "Returns the length of the table, i.e. the number of elements.",
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "readonly": true,
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "length",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3608,
                  "col": 4
                }
              }
            ],
            "indexSignatures": [],
            "methods": [
              {
                "jsDoc": "Accessor function 鈥?gets the element stored at a given index.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "get",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "index",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "Function",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Function"
                        }
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3611,
                  "col": 4
                }
              },
              {
                "jsDoc": "Increases the size of the `Table` instance by a specified number of elements.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "grow",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "delta",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3614,
                  "col": 4
                }
              },
              {
                "jsDoc": "Sets an element stored at a given index to a given value.",
                "accessibility": null,
                "optional": false,
                "isAbstract": false,
                "isStatic": false,
                "name": "set",
                "kind": "method",
                "functionDef": {
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "index",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "value",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "Function",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Function"
                            }
                          },
                          {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        ]
                      }
                    }
                  ],
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "isAsync": false,
                  "isGenerator": false,
                  "typeParams": []
                },
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3617,
                  "col": 4
                }
              }
            ],
            "extends": null,
            "implements": [],
            "typeParams": [],
            "superTypeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "GlobalDescriptor",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3621,
            "col": 2
          },
          "jsDoc": "The `GlobalDescriptor` describes the options you can pass to `new WebAssembly.Global()`.",
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "mutable",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3622,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "value",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3623,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ValueType",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ValueType"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "MemoryDescriptor",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3627,
            "col": 2
          },
          "jsDoc": "The `MemoryDescriptor` describes the options you can pass to `new WebAssembly.Memory()`.",
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "initial",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3628,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "maximum",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3629,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ModuleExportDescriptor",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3633,
            "col": 2
          },
          "jsDoc": "A `ModuleExportDescriptor` is the description of a declared export in a `WebAssembly.Module`.",
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "kind",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3634,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ImportExportKind",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ImportExportKind"
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3635,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "ModuleImportDescriptor",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3639,
            "col": 2
          },
          "jsDoc": "A `ModuleImportDescriptor` is the description of a declared import in a `WebAssembly.Module`.",
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "kind",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3640,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ImportExportKind",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ImportExportKind"
                  }
                },
                "typeParams": []
              },
              {
                "name": "module",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3641,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3642,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "TableDescriptor",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3646,
            "col": 2
          },
          "jsDoc": "The `TableDescriptor` describes the options you can pass to `new WebAssembly.Table()`.",
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "element",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3647,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "TableKind",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "TableKind"
                  }
                },
                "typeParams": []
              },
              {
                "name": "initial",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3648,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "maximum",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3649,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "interface",
          "name": "WebAssemblyInstantiatedSource",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3653,
            "col": 2
          },
          "jsDoc": "The value returned from `WebAssembly.instantiate` and `WebAssembly.instantiateStreaming`.",
          "interfaceDef": {
            "extends": [],
            "methods": [],
            "properties": [
              {
                "name": "instance",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3655,
                  "col": 4
                },
                "jsDoc": null,
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Instance",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Instance"
                  }
                },
                "typeParams": []
              },
              {
                "name": "module",
                "location": {
                  "filename": "lib.deno.d.ts",
                  "line": 3661,
                  "col": 4
                },
                "jsDoc": "A `WebAssembly.Module` object representing the compiled WebAssembly module.\nThis `Module` can be instantiated again, or shared via postMessage().",
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Module",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Module"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": [],
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ImportExportKind",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3664,
            "col": 2
          },
          "jsDoc": null,
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "function",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "function"
                  }
                },
                {
                  "repr": "global",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "global"
                  }
                },
                {
                  "repr": "memory",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "memory"
                  }
                },
                {
                  "repr": "table",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "table"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "TableKind",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3665,
            "col": 2
          },
          "jsDoc": null,
          "typeAliasDef": {
            "tsType": {
              "repr": "anyfunc",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "anyfunc"
              }
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ValueType",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3666,
            "col": 2
          },
          "jsDoc": null,
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "f32",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "f32"
                  }
                },
                {
                  "repr": "f64",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "f64"
                  }
                },
                {
                  "repr": "i32",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "i32"
                  }
                },
                {
                  "repr": "i64",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "i64"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ExportValue",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3667,
            "col": 2
          },
          "jsDoc": null,
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Function",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Function"
                  }
                },
                {
                  "repr": "Global",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Global"
                  }
                },
                {
                  "repr": "Memory",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Memory"
                  }
                },
                {
                  "repr": "Table",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Table"
                  }
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "Exports",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3668,
            "col": 2
          },
          "jsDoc": null,
          "typeAliasDef": {
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "ExportValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ExportValue"
                    }
                  }
                ],
                "typeName": "Record"
              }
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ImportValue",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3669,
            "col": 2
          },
          "jsDoc": null,
          "typeAliasDef": {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "ExportValue",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ExportValue"
                  }
                },
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              ]
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "ModuleImports",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3670,
            "col": 2
          },
          "jsDoc": null,
          "typeAliasDef": {
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "ImportValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ImportValue"
                    }
                  }
                ],
                "typeName": "Record"
              }
            },
            "typeParams": []
          }
        },
        {
          "kind": "typeAlias",
          "name": "Imports",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3671,
            "col": 2
          },
          "jsDoc": null,
          "typeAliasDef": {
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "ModuleImports",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ModuleImports"
                    }
                  }
                ],
                "typeName": "Record"
              }
            },
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "compile",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3681,
            "col": 2
          },
          "jsDoc": "The `WebAssembly.compile()` function compiles WebAssembly binary code into a\n`WebAssembly.Module` object. This function is useful if it is necessary to compile\na module before it can be instantiated (otherwise, the `WebAssembly.instantiate()`\nfunction should be used).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile)",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "bytes",
                "optional": false,
                "tsType": {
                  "repr": "BufferSource",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BufferSource"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Module",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Module"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "compileStreaming",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3691,
            "col": 2
          },
          "jsDoc": "The `WebAssembly.compileStreaming()` function compiles a `WebAssembly.Module`\ndirectly from a streamed underlying source.  This function is useful if it\nis necessary to a compile a module before it can be instantiated (otherwise,\nthe `WebAssembly.instantiateStreaming()` function should be used).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming)",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "source",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Response",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Response"
                      }
                    },
                    {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Response",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Response"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Module",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Module"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "instantiate",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3706,
            "col": 2
          },
          "jsDoc": "The WebAssembly.instantiate() function allows you to compile and instantiate\nWebAssembly code.\n\nThis overload takes the WebAssembly binary code, in the form of a typed\narray or ArrayBuffer, and performs both compilation and instantiation in one step.\nThe returned Promise resolves to both a compiled WebAssembly.Module and its first\nWebAssembly.Instance.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "bytes",
                "optional": false,
                "tsType": {
                  "repr": "BufferSource",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BufferSource"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "importObject",
                "optional": true,
                "tsType": {
                  "repr": "Imports",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Imports"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "WebAssemblyInstantiatedSource",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "WebAssemblyInstantiatedSource"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "instantiate",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3721,
            "col": 2
          },
          "jsDoc": "The WebAssembly.instantiate() function allows you to compile and instantiate\nWebAssembly code.\n\nThis overload takes an already-compiled WebAssembly.Module and returns\na Promise that resolves to an Instance of that Module. This overload is useful\nif the Module has already been compiled.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate)",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "moduleObject",
                "optional": false,
                "tsType": {
                  "repr": "Module",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Module"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "importObject",
                "optional": true,
                "tsType": {
                  "repr": "Imports",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Imports"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Instance",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Instance"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "instantiateStreaming",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3733,
            "col": 2
          },
          "jsDoc": "The `WebAssembly.instantiateStreaming()` function compiles and instantiates a\nWebAssembly module directly from a streamed underlying source. This is the most\nefficient, optimized way to load WebAssembly code.\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming)",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "response",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Response",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Response"
                      }
                    },
                    {
                      "repr": "PromiseLike",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Response",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Response"
                            }
                          }
                        ],
                        "typeName": "PromiseLike"
                      }
                    }
                  ]
                }
              },
              {
                "kind": "identifier",
                "name": "importObject",
                "optional": true,
                "tsType": {
                  "repr": "Imports",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Imports"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "WebAssemblyInstantiatedSource",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "WebAssemblyInstantiatedSource"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        },
        {
          "kind": "function",
          "name": "validate",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3745,
            "col": 2
          },
          "jsDoc": "The `WebAssembly.validate()` function validates a given typed array of\nWebAssembly binary code, returning whether the bytes form a valid wasm\nmodule (`true`) or not (`false`).\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate)",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "bytes",
                "optional": false,
                "tsType": {
                  "repr": "BufferSource",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "BufferSource"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          }
        }
      ]
    }
  },
  {
    "kind": "function",
    "name": "setTimeout",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3753,
      "col": 0
    },
    "jsDoc": "Sets a timer which executes a function once after the timer expires. Returns\nan id which may be used to cancel the timeout.\n\n    setTimeout(() => { console.log('hello'); }, 500);",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "cb",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "args",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          }
        },
        {
          "kind": "identifier",
          "name": "delay",
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          }
        },
        {
          "kind": "rest",
          "arg": {
            "kind": "identifier",
            "name": "args",
            "optional": false,
            "tsType": null
          },
          "tsType": {
            "repr": "",
            "kind": "array",
            "array": {
              "repr": "any",
              "kind": "keyword",
              "keyword": "any"
            }
          }
        }
      ],
      "returnType": {
        "repr": "number",
        "kind": "keyword",
        "keyword": "number"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "setInterval",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3767,
      "col": 0
    },
    "jsDoc": "Repeatedly calls a function , with a fixed time delay between each call.\n\n    // Outputs 'hello' to the console every 500ms\n    setInterval(() => { console.log('hello'); }, 500);",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "cb",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "args",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          }
        },
        {
          "kind": "identifier",
          "name": "delay",
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          }
        },
        {
          "kind": "rest",
          "arg": {
            "kind": "identifier",
            "name": "args",
            "optional": false,
            "tsType": null
          },
          "tsType": {
            "repr": "",
            "kind": "array",
            "array": {
              "repr": "any",
              "kind": "keyword",
              "keyword": "any"
            }
          }
        }
      ],
      "returnType": {
        "repr": "number",
        "kind": "keyword",
        "keyword": "number"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "clearInterval",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3783,
      "col": 0
    },
    "jsDoc": "Cancels a timed, repeating action which was previously started by a call\nto `setInterval()`\n\n    const id = setInterval(() => {console.log('hello');}, 500);\n    ...\n    clearInterval(id);",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "id",
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "clearTimeout",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3791,
      "col": 0
    },
    "jsDoc": "Cancels a scheduled action initiated by `setTimeout()`\n\n    const id = setTimeout(() => {console.log('hello');}, 500);\n    ...\n    clearTimeout(id);",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "id",
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "queueMicrotask",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3805,
      "col": 0
    },
    "jsDoc": "A microtask is a short function which is executed after the function or\nmodule which created it exits and only if the JavaScript execution stack is\nempty, but before returning control to the event loop being used to drive the\nscript's execution environment. This event loop may be either the main event\nloop or the event loop driving a web worker.\n\n    queueMicrotask(() => { console.log('This event loop stack is complete'); });",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "func",
          "optional": false,
          "tsType": {
            "repr": "VoidFunction",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "VoidFunction"
            }
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "crypto",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3807,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "Crypto",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Crypto"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "function",
    "name": "addEventListener",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3816,
      "col": 0
    },
    "jsDoc": "Registers an event listener in the global scope, which will be called\nsynchronously whenever the event `type` is dispatched.\n\n    addEventListener('unload', () => { console.log('All finished!'); });\n    ...\n    dispatchEvent(new Event('unload'));",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "type",
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        },
        {
          "kind": "identifier",
          "name": "callback",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "EventListenerOrEventListenerObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventListenerOrEventListenerObject"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          }
        },
        {
          "kind": "identifier",
          "name": "options",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              {
                "repr": "AddEventListenerOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "AddEventListenerOptions"
                }
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ]
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "dispatchEvent",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3829,
      "col": 0
    },
    "jsDoc": "Dispatches an event in the global scope, synchronously invoking any\nregistered event listeners for this event in the appropriate order. Returns\nfalse if event is cancelable and at least one of the event handlers which\nhandled this event called Event.preventDefault(). Otherwise it returns true.\n\n    dispatchEvent(new Event('unload'));",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "event",
          "optional": false,
          "tsType": {
            "repr": "Event",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Event"
            }
          }
        }
      ],
      "returnType": {
        "repr": "boolean",
        "kind": "keyword",
        "keyword": "boolean"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "removeEventListener",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3837,
      "col": 0
    },
    "jsDoc": "Remove a previously registered event listener from the global scope\n\n    const lstnr = () => { console.log('hello'); };\n    addEventListener('load', lstnr);\n    removeEventListener('load', lstnr);",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "type",
          "optional": false,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        },
        {
          "kind": "identifier",
          "name": "callback",
          "optional": false,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "EventListenerOrEventListenerObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventListenerOrEventListenerObject"
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          }
        },
        {
          "kind": "identifier",
          "name": "options",
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              {
                "repr": "EventListenerOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EventListenerOptions"
                }
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ]
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "Console",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3855,
      "col": 0
    },
    "jsDoc": null,
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "assert",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3856,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "condition",
              "optional": true,
              "tsType": {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              }
            },
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "clear",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3857,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "count",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3858,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "countReset",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3859,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "debug",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3860,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "dir",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3861,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "item",
              "optional": true,
              "tsType": {
                "repr": "any",
                "kind": "keyword",
                "keyword": "any"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "any",
                "kind": "keyword",
                "keyword": "any"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "dirxml",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3862,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "error",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3863,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "group",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3864,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "groupCollapsed",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3865,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "groupEnd",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3866,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "info",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3867,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "log",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3868,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "table",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3869,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "tabularData",
              "optional": true,
              "tsType": {
                "repr": "any",
                "kind": "keyword",
                "keyword": "any"
              }
            },
            {
              "kind": "identifier",
              "name": "properties",
              "optional": true,
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "time",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3870,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "timeEnd",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3871,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "timeLog",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3872,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "timeStamp",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3873,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "label",
              "optional": true,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "trace",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3874,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        },
        {
          "name": "warn",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3875,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "rest",
              "arg": {
                "kind": "identifier",
                "name": "data",
                "optional": false,
                "tsType": null
              },
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              }
            }
          ],
          "returnType": {
            "repr": "void",
            "kind": "keyword",
            "keyword": "void"
          },
          "typeParams": []
        }
      ],
      "properties": [],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "console",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3878,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "Console",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Console"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "interface",
    "name": "Crypto",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3880,
      "col": 0
    },
    "jsDoc": null,
    "interfaceDef": {
      "extends": [],
      "methods": [
        {
          "name": "getRandomValues",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3882,
            "col": 2
          },
          "jsDoc": null,
          "optional": false,
          "params": [
            {
              "kind": "identifier",
              "name": "array",
              "optional": false,
              "tsType": {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              }
            }
          ],
          "returnType": {
            "repr": "T",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "T"
            }
          },
          "typeParams": [
            {
              "name": "T",
              "constraint": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Int8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Int8Array"
                    }
                  },
                  {
                    "repr": "Int16Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Int16Array"
                    }
                  },
                  {
                    "repr": "Int32Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Int32Array"
                    }
                  },
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  },
                  {
                    "repr": "Uint16Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint16Array"
                    }
                  },
                  {
                    "repr": "Uint32Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint32Array"
                    }
                  },
                  {
                    "repr": "Uint8ClampedArray",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8ClampedArray"
                    }
                  },
                  {
                    "repr": "Float32Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Float32Array"
                    }
                  },
                  {
                    "repr": "Float64Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Float64Array"
                    }
                  },
                  {
                    "repr": "DataView",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "DataView"
                    }
                  },
                  {
                    "repr": "null",
                    "kind": "keyword",
                    "keyword": "null"
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "subtle",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3881,
            "col": 2
          },
          "jsDoc": null,
          "params": [],
          "computed": false,
          "optional": false,
          "tsType": {
            "repr": "null",
            "kind": "keyword",
            "keyword": "null"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "MessageEvent",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3906,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "MessageEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "MessageEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3915,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": "Returns the data of the message.",
          "tsType": {
            "repr": "T",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "T"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "data",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3910,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the last event ID string, for server-sent events.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "lastEventId",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3914,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [
        {
          "name": "T",
          "default": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          }
        }
      ],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "ErrorEvent",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3926,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "type",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "ErrorEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ErrorEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3932,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "message",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3927,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "filename",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3928,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "lineno",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3929,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "colno",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3930,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "error",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3931,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Worker",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3953,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "specifier",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "WorkerOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WorkerOptions"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3957,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "e",
                  "optional": false,
                  "tsType": {
                    "repr": "ErrorEvent",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ErrorEvent"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "onerror",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3954,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "e",
                  "optional": false,
                  "tsType": {
                    "repr": "MessageEvent",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "MessageEvent"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "onmessage",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3955,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "e",
                  "optional": false,
                  "tsType": {
                    "repr": "MessageEvent",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "MessageEvent"
                    }
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": true,
          "isAbstract": false,
          "isStatic": false,
          "name": "onmessageerror",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3956,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "postMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "message",
                "optional": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              },
              {
                "kind": "identifier",
                "name": "transfer",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "ArrayBuffer",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ArrayBuffer"
                    }
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3961,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "postMessage",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "message",
                "optional": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "PostMessageOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PostMessageOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3962,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Worker",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Worker"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "WorkerEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "WorkerEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "WorkerEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WorkerEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3963,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "addEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "AddEventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AddEventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3968,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Worker",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Worker"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "WorkerEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "WorkerEventMap"
                              }
                            },
                            "indexType": {
                              "repr": "K",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "K"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": [
              {
                "name": "K",
                "constraint": {
                  "repr": "",
                  "kind": "typeOperator",
                  "typeOperator": {
                    "operator": "keyof",
                    "tsType": {
                      "repr": "WorkerEventMap",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "WorkerEventMap"
                      }
                    }
                  }
                }
              }
            ]
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3973,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "removeEventListener",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "listener",
                "optional": false,
                "tsType": {
                  "repr": "EventListenerOrEventListenerObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EventListenerOrEventListenerObject"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "EventListenerOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EventListenerOptions"
                      }
                    }
                  ]
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3978,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "terminate",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3983,
            "col": 2
          }
        }
      ],
      "extends": "EventTarget",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "typeAlias",
    "name": "PerformanceEntryList",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3986,
      "col": 0
    },
    "jsDoc": null,
    "typeAliasDef": {
      "tsType": {
        "repr": "",
        "kind": "array",
        "array": {
          "repr": "PerformanceEntry",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "PerformanceEntry"
          }
        }
      },
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Performance",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 3988,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3989,
            "col": 2
          }
        }
      ],
      "properties": [],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": "Removes the stored timestamp with the associated name.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clearMarks",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "markName",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3992,
            "col": 2
          }
        },
        {
          "jsDoc": "Removes stored timestamp with the associated name.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "clearMeasures",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "measureName",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3995,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getEntries",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "PerformanceEntryList",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceEntryList"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3997,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getEntriesByName",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "type",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "PerformanceEntryList",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceEntryList"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3998,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "getEntriesByType",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "PerformanceEntryList",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceEntryList"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 3999,
            "col": 2
          }
        },
        {
          "jsDoc": "Stores a timestamp with the associated name (a \"mark\").",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "mark",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "markName",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "PerformanceMarkOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PerformanceMarkOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "PerformanceMark",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceMark"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4002,
            "col": 2
          }
        },
        {
          "jsDoc": "Stores the `DOMHighResTimeStamp` duration between two marks along with the\nassociated name (a \"measure\").",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "measure",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "measureName",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "options",
                "optional": true,
                "tsType": {
                  "repr": "PerformanceMeasureOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PerformanceMeasureOptions"
                  }
                }
              }
            ],
            "returnType": {
              "repr": "PerformanceMeasure",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceMeasure"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4006,
            "col": 2
          }
        },
        {
          "jsDoc": "Stores the `DOMHighResTimeStamp` duration between two marks along with the\nassociated name (a \"measure\").",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "measure",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "measureName",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "startMark",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "endMark",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "PerformanceMeasure",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "PerformanceMeasure"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4012,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns a current time from Deno's start in milliseconds.\n\nUse the permission flag `--allow-hrtime` return a precise value.\n\n```ts\nconst t = performance.now();\nconsole.log(`${t} ms since start!`);\n```",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "now",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4027,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "performance",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4030,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "Performance",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Performance"
        }
      },
      "kind": "var"
    }
  },
  {
    "kind": "interface",
    "name": "PerformanceMarkOptions",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4032,
      "col": 0
    },
    "jsDoc": null,
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "detail",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4034,
            "col": 2
          },
          "jsDoc": "Metadata to be included in the mark.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "typeParams": []
        },
        {
          "name": "startTime",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4037,
            "col": 2
          },
          "jsDoc": "Timestamp to be used as the mark time.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "PerformanceMeasureOptions",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4040,
      "col": 0
    },
    "jsDoc": null,
    "interfaceDef": {
      "extends": [],
      "methods": [],
      "properties": [
        {
          "name": "detail",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4042,
            "col": 2
          },
          "jsDoc": "Metadata to be included in the measure.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "typeParams": []
        },
        {
          "name": "start",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4046,
            "col": 2
          },
          "jsDoc": "Timestamp to be used as the start time or string to be used as start\nmark.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            ]
          },
          "typeParams": []
        },
        {
          "name": "duration",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4049,
            "col": 2
          },
          "jsDoc": "Duration between the start and end times.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "typeParams": []
        },
        {
          "name": "end",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4052,
            "col": 2
          },
          "jsDoc": "Timestamp to be used as the end time or string to be used as end mark.",
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            ]
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "PerformanceEntry",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4059,
      "col": 0
    },
    "jsDoc": "Encapsulates a single performance metric that is part of the performance\ntimeline. A performance entry can be directly created by making a performance\nmark or measure (for example by calling the `.mark()` method) at an explicit\npoint in an application.",
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "duration",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4060,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entryType",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4061,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "name",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4062,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "number",
            "kind": "keyword",
            "keyword": "number"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "startTime",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4063,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toJSON",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "any",
              "kind": "keyword",
              "keyword": "any"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4064,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "PerformanceMark",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4071,
      "col": 0
    },
    "jsDoc": "`PerformanceMark`聽is an abstract interface for `PerformanceEntry` objects\nwith an entryType of `\"mark\"`. Entries of this type are created by calling\n`performance.mark()` to add a named `DOMHighResTimeStamp` (the mark) to the\nperformance timeline.",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "name",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "options",
              "optional": true,
              "tsType": {
                "repr": "PerformanceMarkOptions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PerformanceMarkOptions"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4074,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "detail",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4072,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "mark",
            "kind": "literal",
            "literal": {
              "kind": "string",
              "string": "mark"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entryType",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4073,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "PerformanceEntry",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "PerformanceMeasure",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4081,
      "col": 0
    },
    "jsDoc": "`PerformanceMeasure` is an abstract interface for `PerformanceEntry` objects\nwith an entryType of `\"measure\"`. Entries of this type are created by calling\n`performance.measure()` to add a named `DOMHighResTimeStamp` (the measure)\nbetween two marks to the performance timeline.",
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "detail",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4082,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "measure",
            "kind": "literal",
            "literal": {
              "kind": "string",
              "string": "measure"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "entryType",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4083,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "PerformanceEntry",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "interface",
    "name": "CustomEventInit",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4086,
      "col": 0
    },
    "jsDoc": null,
    "interfaceDef": {
      "extends": [
        {
          "repr": "EventInit",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "EventInit"
          }
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "detail",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4087,
            "col": 2
          },
          "jsDoc": null,
          "params": [],
          "computed": false,
          "optional": true,
          "tsType": {
            "repr": "T",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "T"
            }
          },
          "typeParams": []
        }
      ],
      "callSignatures": [],
      "indexSignatures": [],
      "typeParams": [
        {
          "name": "T",
          "default": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          }
        }
      ]
    }
  },
  {
    "kind": "class",
    "name": "CustomEvent",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4090,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [
            {
              "kind": "identifier",
              "name": "typeArg",
              "optional": false,
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            {
              "kind": "identifier",
              "name": "eventInitDict",
              "optional": true,
              "tsType": {
                "repr": "CustomEventInit",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "T"
                      }
                    }
                  ],
                  "typeName": "CustomEventInit"
                }
              }
            }
          ],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4091,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": "Returns any custom data event was created with. Typically used for\nsynthetic events.",
          "tsType": {
            "repr": "T",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "T"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "detail",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4094,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [],
      "extends": "Event",
      "implements": [],
      "typeParams": [
        {
          "name": "T",
          "default": {
            "repr": "any",
            "kind": "keyword",
            "keyword": "any"
          }
        }
      ],
      "superTypeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Window",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4112,
      "col": 0
    },
    "jsDoc": null,
    "classDef": {
      "isAbstract": false,
      "constructors": [],
      "properties": [
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "Window",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Window"
                }
              },
              {
                "repr": "globalThis",
                "kind": "typeQuery",
                "typeQuery": "globalThis"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "window",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4114,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "intersection",
            "intersection": [
              {
                "repr": "Window",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Window"
                }
              },
              {
                "repr": "globalThis",
                "kind": "typeQuery",
                "typeQuery": "globalThis"
              }
            ]
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "self",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4115,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Window",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Window"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "Event",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Event"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onload",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4116,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "any",
                      "kind": "keyword",
                      "keyword": "any"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "this",
                        "optional": false,
                        "tsType": {
                          "repr": "Window",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Window"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "ev",
                        "optional": false,
                        "tsType": {
                          "repr": "Event",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Event"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                }
              },
              {
                "repr": "null",
                "kind": "keyword",
                "keyword": "null"
              }
            ]
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "onunload",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4117,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "close",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4118,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "boolean",
            "kind": "keyword",
            "keyword": "boolean"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "closed",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4119,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "message",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "alert",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4120,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "message",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "confirm",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4121,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "",
            "kind": "fnOrConstructor",
            "fnOrConstructor": {
              "constructor": false,
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "null",
                    "kind": "keyword",
                    "keyword": "null"
                  }
                ]
              },
              "params": [
                {
                  "kind": "identifier",
                  "name": "message",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "defaultValue",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "typeParams": []
            }
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "prompt",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4122,
            "col": 2
          }
        },
        {
          "jsDoc": null,
          "tsType": {
            "repr": "Deno",
            "kind": "typeQuery",
            "typeQuery": "Deno"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "Deno",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4123,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "new",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "Window",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Window"
              }
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4113,
            "col": 2
          }
        }
      ],
      "extends": "EventTarget",
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "window",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4126,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "intersection",
        "intersection": [
          {
            "repr": "Window",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Window"
            }
          },
          {
            "repr": "globalThis",
            "kind": "typeQuery",
            "typeQuery": "globalThis"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "self",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4127,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "intersection",
        "intersection": [
          {
            "repr": "Window",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "Window"
            }
          },
          {
            "repr": "globalThis",
            "kind": "typeQuery",
            "typeQuery": "globalThis"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "onload",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4128,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "",
            "kind": "parenthesized",
            "parenthesized": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "this",
                    "optional": false,
                    "tsType": {
                      "repr": "Window",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Window"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "ev",
                    "optional": false,
                    "tsType": {
                      "repr": "Event",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Event"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            }
          },
          {
            "repr": "null",
            "kind": "keyword",
            "keyword": "null"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "variable",
    "name": "onunload",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4129,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "",
            "kind": "parenthesized",
            "parenthesized": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "any",
                  "kind": "keyword",
                  "keyword": "any"
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "this",
                    "optional": false,
                    "tsType": {
                      "repr": "Window",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Window"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "ev",
                    "optional": false,
                    "tsType": {
                      "repr": "Event",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Event"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            }
          },
          {
            "repr": "null",
            "kind": "keyword",
            "keyword": "null"
          }
        ]
      },
      "kind": "var"
    }
  },
  {
    "kind": "function",
    "name": "alert",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4136,
      "col": 0
    },
    "jsDoc": "Shows the given message and waits for the enter key pressed.\nIf the stdin is not interactive, it does nothing.\n@param message",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "message",
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        }
      ],
      "returnType": {
        "repr": "void",
        "kind": "keyword",
        "keyword": "void"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "confirm",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4144,
      "col": 0
    },
    "jsDoc": "Shows the given message and waits for the answer. Returns the user's answer as boolean.\nOnly `y` and `Y` are considered as true.\nIf the stdin is not interactive, it returns false.\n@param message",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "message",
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        }
      ],
      "returnType": {
        "repr": "boolean",
        "kind": "keyword",
        "keyword": "boolean"
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "function",
    "name": "prompt",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4155,
      "col": 0
    },
    "jsDoc": "Shows the given message and waits for the user's input. Returns the user's input as string.\nIf the default value is given and the user inputs the empty string, then it returns the given\ndefault value.\nIf the default value is not given and the user inputs the empty string, it returns null.\nIf the stdin is not interactive, it returns null.\n@param message\n@param defaultValue",
    "functionDef": {
      "params": [
        {
          "kind": "identifier",
          "name": "message",
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        },
        {
          "kind": "identifier",
          "name": "defaultValue",
          "optional": true,
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        }
      ],
      "returnType": {
        "repr": "",
        "kind": "union",
        "union": [
          {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          {
            "repr": "null",
            "kind": "keyword",
            "keyword": "null"
          }
        ]
      },
      "isAsync": false,
      "isGenerator": false,
      "typeParams": []
    }
  },
  {
    "kind": "class",
    "name": "Location",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4162,
      "col": 0
    },
    "jsDoc": "The location (URL) of the object it is linked to. Changes done on it are\nreflected on the object it relates to. Accessible via\n`globalThis.location`.",
    "classDef": {
      "isAbstract": false,
      "constructors": [
        {
          "jsDoc": null,
          "accessibility": null,
          "name": "constructor",
          "params": [],
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4163,
            "col": 2
          }
        }
      ],
      "properties": [
        {
          "jsDoc": "Returns a DOMStringList object listing the origins of the ancestor\nbrowsing contexts, from the parent browsing context to the top-level\nbrowsing context.\n\nAlways empty in Deno.",
          "tsType": {
            "repr": "DOMStringList",
            "kind": "typeRef",
            "typeRef": {
              "typeParams": null,
              "typeName": "DOMStringList"
            }
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "ancestorOrigins",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4169,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the Location object's URL's fragment (includes leading \"#\" if\nnon-empty).\n\nCannot be set in Deno.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hash",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4174,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the Location object's URL's host and port (if different from the\ndefault port for the scheme).\n\nCannot be set in Deno.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "host",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4179,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the Location object's URL's host.\n\nCannot be set in Deno.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "hostname",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4183,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the Location object's URL.\n\nCannot be set in Deno.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "href",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4187,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the Location object's URL's origin.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": true,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "origin",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4190,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the Location object's URL's path.\n\nCannot be set in Deno.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "pathname",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4194,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the Location object's URL's port.\n\nCannot be set in Deno.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "port",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4198,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the Location object's URL's scheme.\n\nCannot be set in Deno.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "protocol",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4202,
            "col": 2
          }
        },
        {
          "jsDoc": "Returns the Location object's URL's query (includes leading \"?\" if\nnon-empty).\n\nCannot be set in Deno.",
          "tsType": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          },
          "readonly": false,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "search",
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4207,
            "col": 2
          }
        }
      ],
      "indexSignatures": [],
      "methods": [
        {
          "jsDoc": null,
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "toString",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4188,
            "col": 2
          }
        },
        {
          "jsDoc": "Navigates to the given URL.\n\nCannot be set in Deno.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "assign",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4211,
            "col": 2
          }
        },
        {
          "jsDoc": "Reloads the current page.\n\nDisabled in Deno.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reload",
          "kind": "method",
          "functionDef": {
            "params": [],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4215,
            "col": 2
          }
        },
        {
          "jsDoc": "@deprecated",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "reload",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "forcedReload",
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4217,
            "col": 2
          }
        },
        {
          "jsDoc": "Removes the current page from the session history and navigates to the\ngiven URL.\n\nDisabled in Deno.",
          "accessibility": null,
          "optional": false,
          "isAbstract": false,
          "isStatic": false,
          "name": "replace",
          "kind": "method",
          "functionDef": {
            "params": [
              {
                "kind": "identifier",
                "name": "url",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "returnType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "isAsync": false,
            "isGenerator": false,
            "typeParams": []
          },
          "location": {
            "filename": "lib.deno.d.ts",
            "line": 4222,
            "col": 2
          }
        }
      ],
      "extends": null,
      "implements": [],
      "typeParams": [],
      "superTypeParams": []
    }
  },
  {
    "kind": "variable",
    "name": "location",
    "location": {
      "filename": "lib.deno.d.ts",
      "line": 4227,
      "col": 0
    },
    "jsDoc": null,
    "variableDef": {
      "tsType": {
        "repr": "Location",
        "kind": "typeRef",
        "typeRef": {
          "typeParams": null,
          "typeName": "Location"
        }
      },
      "kind": "var"
    }
  }
]
